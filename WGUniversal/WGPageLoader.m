////  WGPageLoader.m//  ZhaobaoApp////  Created by AndyM on 14-8-8.//  Copyright (c) 2014年 WGHX. All rights reserved.//#import "WGPageLoader.h"#import "WGPageLoader-internal.h"#import "WGBaseViewController.h"#import "UIColor+HexString.h"#import "UIScrollView+MJRefresh.h"#import "DDMenuController.h"#import <MediaPlayer/MediaPlayer.h>#import "UIView+WGViewInfo.h"#import "FAKIcon.h"#import "FAKZocial.h"#import "UILabel+VerticalAlign.h"#import "WGUILabel.h"#import "GCPlaceholderTextView.h"#import "DALabeledCircularProgressView.h"#import "DACircularProgressView.h"#import "JAMSVGImage.h"#import "JAMSVGImageView.h"#import "YPAppDelegate.h"#import "INTUAnimationEngine.h"#import <QuartzCore/QuartzCore.h>#import "Masonry.h"#import "SEFilterControl.h"#import "DTCoreText.h"#import "WGPieChart.h"#import "WGPieChartViewController.h"#import "EColumnChartViewController.h"#import "YPAppDelegate.h"#import "WTMGlyphDetectorView.h"static NSMutableDictionary *_iconFontPaths;@implementation WGViewInfo {}- (NSString *) description {    return [NSString stringWithFormat:@"{\r\n\bindView : %@,\r\n\tcName : %@,\r\n\tpageId : %ld,\r\n\tpath : %@, \r\n\tvc: %@, \r\n\tsection: %ld, \r\n\tindexpath: %@, \r\n\tproperties: %@\r\n}",        self.bindView, self.cName, (long)self.pageId, self.path, self.vc, (long)self.section, self.indexpath, self.properties];}@end@implementation WGPageLoader {    int _tagCount;    NSMutableDictionary *_cellDelegates;    NSInteger _menuMainPageId;    NSString *_bundleName;    NSBundle *_bundle;    NSMutableArray *_fontArray;        UITextField *textfieldView;      NSMutableDictionary *_pageDelegates;    }#define IsIOS8 (NSFoundationVersionNumber > NSFoundationVersionNumber_iOS_7_1)-(CGRect)currentScreenBoundsDependOnOrientation{    CGRect screenBounds = [UIScreen mainScreen].bounds ;    if(IsIOS8){        return screenBounds ;    }    CGFloat width = CGRectGetWidth(screenBounds)  ;    CGFloat height = CGRectGetHeight(screenBounds) ;    UIInterfaceOrientation interfaceOrientation = [UIApplication sharedApplication].statusBarOrientation;        if(UIInterfaceOrientationIsPortrait(interfaceOrientation)){        screenBounds.size = CGSizeMake(width, height);    }else if(UIInterfaceOrientationIsLandscape(interfaceOrientation)){        screenBounds.size = CGSizeMake(height, width);    }    return screenBounds ;}- (CGFloat) fixWidth: (CGFloat) width {    return [self currentScreenBoundsDependOnOrientation].size.width - 320 + width;}#pragma mark - 获取bundle文件中某资源文件是真实地址-(NSString *) getRealPathForResoureInBundle: (NSString *) relativePath {    return [_bundle pathForResource:[NSString stringWithFormat:@"%@",relativePath] ofType:nil];}#pragma mark - 判断版本是否在iOS7以上- (BOOL)isIOS7OrHigher{    float versionNumber = floor(NSFoundationVersionNumber);    return versionNumber > NSFoundationVersionNumber_iOS_6_1;}- (BOOL)isIOS8OrHigher{    float versionNumber = floor(NSFoundationVersionNumber);    return versionNumber > NSFoundationVersionNumber_iOS_7_1;}#pragma mark - 判断版本是自适应高度- (CGFloat)heightOfText:(NSString *) text font: (UIFont *) font     withSuperviewWidth:(CGFloat)superviewWidth {    if (![self isIOS7OrHigher]) {        //version < 7.0                CGSize size = [text sizeWithFont:font                       constrainedToSize:CGSizeMake(superviewWidth, MAXFLOAT)                           lineBreakMode:NSLineBreakByWordWrapping];        return size.height;    }    else {        //version >= 7.0        NSStringDrawingContext *context     = [[NSStringDrawingContext alloc] init];        //Return the calculated size of the Label        CGSize size = [text boundingRectWithSize:CGSizeMake(superviewWidth, MAXFLOAT)                                         options:NSStringDrawingUsesLineFragmentOrigin                                      attributes:@{                                                   NSFontAttributeName : font                                                   }                                         context:context].size;        return size.height;    }}#pragma mark - 视图的自适应高度- (CGFloat) heightThatFitView: (UIView *) view {    [view setNeedsLayout];    [view layoutIfNeeded];    CGFloat height = [view systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height;        if(height == 0) {        height = view.frame.size.height;    }    return  height;}- (CGFloat) fixRatio {    return [self currentScreenBoundsDependOnOrientation].size.width / 320.f;}#pragma mark - 视图的自适应高度- (CGFloat) realFontSize: (NSString *) fontSizeStr {    static CGFloat fixRatio = 0;    NSRange range = [fontSizeStr rangeOfString:@"d"];    if(range.length > 0) {        if(fixRatio == 0) {            fixRatio = [self fixRatio];        }        CGFloat fontsize = [[fontSizeStr substringFromIndex:range.location+1] floatValue];        return fixRatio * fontsize;    }    else {        return [fontSizeStr floatValue];    }}#pragma mark - 获得路径匹配的子视图- (NSArray *) parseSubviewLocation: (NSString *) str {    //str = @"prev.width-32.5";    //str = @"subviews/0/subviews/9";    NSError* regexError = nil;    NSString *pattern = @"subviews/([0-9]+)";    NSRegularExpression* regex = [NSRegularExpression regularExpressionWithPattern:pattern       options:NSRegularExpressionCaseInsensitive|NSRegularExpressionDotMatchesLineSeparators         error:&regexError];    if (regexError)    {        NSLog(@"Regex creation failed with error: %@", [regexError description]);        return nil;    }        NSArray* matches = [regex matchesInString:str                                      options:NSMatchingWithoutAnchoringBounds                                        range:NSMakeRange(0, str.length)];    NSLog(@"matches = %@",matches);        if ([matches count]>0) {       NSMutableArray *result = [NSMutableArray array];        for (NSTextCheckingResult *firstMatch in matches) {            NSRange range = [firstMatch rangeAtIndex:1];            NSString *submatch = [str substringWithRange:range];            if(![submatch isEqualToString:@""]) {                [result addObject:submatch];            }        }        NSLog(@"getSubviewLocation parse result %@", result);        return result;    } else {        NSLog(@"Pattern <%@> doesn't match string <%@>", pattern, str);    }    return nil;}- (UIView *) getSubviewByPath: (NSString *) subviewPath parentView: (UIView *) parentView{    NSString *parentPath = parentView.wgInfo.path;    NSRange range = [subviewPath rangeOfString:parentPath];    if(range.length > 0) {        NSString *relativePath = [subviewPath substringFromIndex:range.location+range.length];        NSLog(@"relativePath = %@", relativePath);        NSArray *subviewLocation = [self parseSubviewLocation:relativePath];        if(subviewLocation!=nil && subviewLocation.count > 0) {            UIView *subview = parentView;            for (NSString *indexStr in subviewLocation) {                subview = [[subview subviews] objectAtIndex:[indexStr integerValue]];            }            if([subview.wgInfo.path isEqualToString:subviewPath]){                return subview;            }        }    }    return nil;}#pragma mark - 返回numberOfSectionsDefaultOfView- (NSInteger)numberOfSectionsDefaultOfView: (UIView *) view {    NSLog(@"numberOfSectionsDefaultOfView = %@",view.wgInfo);    return [view.wgInfo.vc numberOfSectionsDefault];}- (NSInteger)numberOfRowsInSectionDefault:(NSInteger)section ofView: (UIView *) view {    return [view.wgInfo.vc numberOfRowsInSectionDefault:section];}#pragma mark - 获取PageLoader唯一实例static WGPageLoader *pageLoader;+ (WGPageLoader *) getCurrentInstance {    if(pageLoader == nil) {        pageLoader = [[WGPageLoader alloc] init];    }    return pageLoader;}#pragma mark - 设置和获取页面代理- (void) setDelegate: (id<WGPageLoaderDelegate>) delegate forPageId: (NSInteger) pageid {    if(_pageDelegates == nil ) {        _pageDelegates = [NSMutableDictionary dictionary];    }    [_pageDelegates setObject:delegate forKey:[NSString stringWithFormat:@"%ld",(long)pageid]];}- (void) setDelegate: (id<WGPageLoaderDelegate>) delegate forViewController: (UIViewController *) viewController {    WGBaseViewController *vc = (WGBaseViewController *)viewController;    vc.wgDelegate = delegate;    [delegate bindedWithViewController: vc];}- (NSObject<WGPageLoaderDelegate> *) delegateForViewController: (UIViewController *) viewController {    WGBaseViewController *vc = (WGBaseViewController *)viewController;    return vc.wgDelegate;}#pragma mark - 1. 加载主视图控制器，支持tabbar和menu两种方式- (UIViewController *) loadRootViewController: (NSString *) rootPlist {    return [self loadRootViewController:rootPlist bundle:nil pageid:0];}- (UIViewController *) loadRootViewController: (NSString *) rootPlist  bundle: (NSString *) bundleName{    return [self loadRootViewController:rootPlist bundle:bundleName pageid: 0];}-(UIViewController *)loadRootViewController: (NSString *) rootPlist bundle: (NSString *) bundleName pageid: (NSInteger) pageid {    _bundleName = bundleName == nil ? @"app" : bundleName;    _bundle = [Plist resourceBundle:_bundleName];    _appPlist =[[Plist alloc] initWithPlistFile:rootPlist bundle: _bundle];    NSString *rootViewType = [_appPlist objectFromPath:@"type"];        if(pageid >0) {        return [self createWidgetUIViewController:pageid];    }    else if([rootViewType isEqualToString:@"tabbar"]) {        NSArray *tabArray = [_appPlist objectFromPath:rootViewType];        return [self createTabBarControllerWithArray: tabArray];    }    else if ([rootViewType isEqualToString:@"menu"]) {        NSDictionary *dict =[_appPlist objectFromPath:rootViewType];        return [self createMenuUIViewController:dict];    }    else if ([rootViewType isEqualToString:@"page"]) {        NSNumber *pageid = [_appPlist objectFromPath:@"pageid"];        NSDictionary *pageId =[_appPlist objectFromPath:rootViewType];        return [self createWidgetUIViewController:[pageid integerValue]];    }        return nil;}#pragma mark - 2.1 从plist中读取参数并创建TabBar- (UITabBarController *) createTabBarControllerWithArray:(NSArray *) tabArray {        UITabBarController *tbc = [[UITabBarController alloc] init];    NSMutableArray* controllers = [[NSMutableArray alloc] init];    for (NSDictionary *tabDict in tabArray) {        //确定第几个        NSNumber *pageid = [tabDict objectForKey:@"pageid"];        UIViewController *vc = [self getViewControllerOfPage:[pageid integerValue]];        //创建UINavigationController        UINavigationController *nav = [self createUINativationControllerWithVC:vc                                                                    andTabDict:tabDict];        [controllers addObject:nav];    }    [tbc setViewControllers:controllers];    return tbc;}#pragma mark- 2.1.1.从tabDict中创建UINativationController添加到vc- (UINavigationController*) createUINativationControllerWithVC: (UIViewController *)vc andTabDict: (NSDictionary *) tabDict {    UINavigationController * nav = [[UINavigationController alloc] initWithRootViewController:vc];    vc.tabBarItem.image= [self imageFromResourcePath:[tabDict objectForKey:@"tabarImage"]];    vc.title =  [tabDict objectForKey:@"tabarTitle"];    return nav;}#pragma mark - 2.2 从plist中读取参数并创建Menu- (UIViewController *) createMenuUIViewController: (NSDictionary *) dict{    NSNumber *menuPageid = [dict objectForKey:@"menuPageid"];    NSNumber *mainPageid = [dict objectForKey:@"mainPageid"];    UIViewController *menuVC = [self getViewControllerOfPage:[menuPageid integerValue]];    UIViewController *mainVC = [self getViewControllerOfPage:[mainPageid integerValue]];    _menuMainPageId = [mainPageid integerValue];    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:mainVC];    DDMenuController *rootController = [[DDMenuController alloc] initWithRootViewController:navController];    rootController.leftViewController = menuVC;    return rootController;}#pragma mark - 2.2.1 从主plist中读取参数并创建Widget,判断NavigationController- (UIViewController *) createWidgetUIViewController: (NSInteger) pageid{    NSString *nav =[_appPlist objectFromPath:@"nav"];    if((nav != nil) && ([nav boolValue])) {        UIViewController *containerVC = [[UIViewController alloc] init];        UIViewController *mainVC = [self createUIViewControllerForPageId:pageid];        UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:mainVC];        navController.view.backgroundColor = [UIColor clearColor];        containerVC.view.backgroundColor = [UIColor clearColor];        [navController setNavigationBarHidden:YES];        [containerVC.view addSubview: navController.view];        [containerVC addChildViewController:navController];        return containerVC;    }else{        UIViewController *containerVC = [[UIViewController alloc] init];        UIViewController *mainVC = [self createUIViewControllerForPageId:pageid];        mainVC.view.frame = containerVC.view.frame;        mainVC.view.autoresizingMask =UIViewAutoresizingFlexibleBottomMargin;        containerVC.view.backgroundColor = [UIColor clearColor];        [containerVC.view addSubview: mainVC.view];        [containerVC addChildViewController:mainVC];        return containerVC;    }    return nil;}#pragma mark - 2.2.2 从plist中添加多个plist- (void) addWidgets: (NSArray *)WidgeArray intoUIViewController: (UIViewController *) parentVC{    WGBaseViewController *parent = (UIViewController *) parentVC;            for ( NSDictionary *dict in WidgeArray) {        NSString *pageid =[dict objectForKey:@"pageid"];        if([pageid integerValue] == parent.view.wgInfo.pageId) {            continue;        }                NSString *nav =[dict objectForKey:@"nav"];        NSString *hidden =[dict objectForKey:@"hidden"];                NSString *defaultPage =[dict objectForKey:@"default"];                        UIViewController *vc = nil;        if((nav != nil) && ([nav boolValue])) {            vc = [self createUIViewControllerForPageId:[pageid integerValue]];            UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:vc];            navController.view.frame = vc.view.frame;            //NSLog(@"frame = %@", NSStringFromCGRect(vc.view.frame));            navController.view.autoresizingMask = vc.view.autoresizingMask;            navController.view.backgroundColor = [UIColor clearColor];            [navController setNavigationBarHidden:YES];                        [parentVC addChildViewController:navController];            [parent addChildViewControllerToContainer:navController addToView:[defaultPage boolValue] || (![hidden boolValue])];                        if([defaultPage boolValue]) {                                parent.currentSubPageVc = navController;            }            else {                            }                    }else{            vc = [self createUIViewControllerForPageId:[pageid integerValue]];                        [parentVC addChildViewController:vc];                        [parent addChildViewControllerToContainer:vc addToView:[defaultPage boolValue] || (![hidden boolValue])];                        if([defaultPage boolValue]) {                parent.currentSubPageVc = vc;            }            else {                                //vc.view.hidden = [hidden boolValue];            }        }                NSLog(@"first load parent.currentSubPageVc = %@, parent = %@",parent.currentSubPageVc, parent);                NSString *isSwitcher =[dict objectForKey:@"is-switcher"];        NSString *autoSelect =[dict objectForKey:@"auto-select"];        if(isSwitcher != nil && [isSwitcher boolValue]) {            NSInteger autoSelectIndex = isSwitcher != nil ? [autoSelect integerValue] : 0;            [self autoSelectSwitcher:vc defaultSelectedIndex:autoSelectIndex];        }    }}#pragma mark - 3 根据页面id获取视图控制器（不存在则创建）-(WGBaseViewController *)getViewControllerOfPage:(NSInteger)pageid{    WGBaseViewController * vc = [_pages objectForKey:[NSString stringWithFormat: @"page%ld", (long)pageid]];    if (vc == nil) {        vc = [self createUIViewControllerForPageId :pageid];    }    return vc;}#pragma mark - 3.1 根据页面路径获取控制器-(UIViewController *) getSubviewControllerByPath:(NSString *)path inPage:(NSInteger) pageid {    UIView *view = [self getSubviewByPath:path andInPage:pageid];    return view.wgInfo.vc;}#pragma mark - 4.根据页面id创建视图控制器- (WGBaseViewController *) createUIViewControllerForPageId :(NSInteger )pageid {    //所有的要跳转的plistNamed    NSString *plistNamed = [self.appPlist objectFromPath:[NSString stringWithFormat:@"pages/%ld/page", (long)pageid]];    //通用currentPageVC    WGBaseViewController *vc =[[WGBaseViewController alloc] init];    vc.view.backgroundColor =[UIColor clearColor];    //通用plist    vc.plist = [[Plist alloc] initWithPlistFile: [NSString stringWithFormat:@"pages/%@",plistNamed] bundle:_bundle];    vc.wgName = [vc.plist objectFromPath:@"name"];    WGViewInfo *wgInfo = [WGViewInfo new];    wgInfo.pageId = pageid;    wgInfo.path = nil;    wgInfo.containerType = WGViewContainerTypeNormal;    wgInfo.cName = vc.wgName;    wgInfo.vc = vc;    wgInfo.bindView = nil;    wgInfo.properties = [NSMutableDictionary dictionaryWithDictionary: vc.plist.root];    vc.view.wgInfo = wgInfo;    if(_pageDelegates!=nil) {        id<WGPageLoaderDelegate> delegate = [_pageDelegates objectForKey:[NSString stringWithFormat: @"%ld",(long)pageid]];        if(delegate!=nil) {            [self setDelegate: delegate forViewController: vc];        }    }    [self applyPropertiesToView: vc.view properties: vc.plist.root inPath: nil forParentView:nil];    [self loadViewTreeForPlist:vc.plist andViewPath:nil forParent:vc.view];        [self addWidgets:[vc.plist objectFromPath: @"subpages"] intoUIViewController:vc];            if(vc.wgDelegate!=nil) {        if([(NSObject *)vc.wgDelegate respondsToSelector:@selector(viewControllerDidLoad:)]) {            [vc.wgDelegate viewControllerDidLoad:vc];        }    }            //设置root视图的wgInfo    if(_pages ==nil){_pages = [NSMutableDictionary new];}    //缓存页面，用于@selector(getViewControllerOfPage:)再次获取    [_pages setObject:vc forKey: [NSString stringWithFormat: @"page%ld", (long)pageid]];    return vc;}#pragma mark- 101.默认选中切换器- (void) autoSelectSwitcher: (WGBaseViewController *) switcher defaultSelectedIndex: (NSInteger) selectedIndex {    if([switcher childViewControllers] > 0) {        WGBaseViewController *realSwitcherVC = [switcher childViewControllers][0];        if([realSwitcherVC isKindOfClass:[WGTableViewViewController class]]) {            UITableView *tableview = ((WGTableViewViewController *)realSwitcherVC).tableView;            ;            [tableview selectRowAtIndexPath:[NSIndexPath indexPathForRow:selectedIndex inSection:0] animated:NO scrollPosition:UITableViewScrollPositionNone];        }        else if ([realSwitcherVC isKindOfClass:[WGCollectionViewController class]]) {            UICollectionView *collectionView = ((WGCollectionViewController *)realSwitcherVC).collectionView;            ;            [collectionView selectItemAtIndexPath:[NSIndexPath indexPathForRow:selectedIndex inSection:0] animated:NO scrollPosition:UICollectionViewScrollPositionNone];                    }    }}#pragma mark- 5.递归创建页面子视图subview- (void)loadViewTreeForPlist:(Plist *)plist andViewPath:(NSString *)path forParent: (UIView *) parentView {    NSLog(@"loadViewTreeForPlist wginfo = %@", parentView.wgInfo);    NSString *rootViewsName = @"subviews";    NSString *subviewPath = path==nil ? rootViewsName : [NSString stringWithFormat:@"%@/%@",path,rootViewsName];    NSArray *subviews = [plist objectFromPath: subviewPath];    int i = 0;    for (NSDictionary* subviewOption in subviews) {        //view 中是否包含view        NSArray *subviewsInSubview = [subviewOption objectForKey:@"subviews"];        NSLog(@" subviewsInSubview ---%@",subviewsInSubview);        UIView *subview = nil;        //subviewInSubviewPath = views/0/cell/3        NSString *subviewInSubviewPath = [NSString stringWithFormat:@"%@/%d",subviewPath, i];        subview = [self createViewFromDictionary:subviewOption atPath: subviewInSubviewPath forParent:parentView];        //添加路径到字典        if(parentView.wgInfo.vc.PathedSubViews==nil){            parentView.wgInfo.vc.PathedSubViews = [[NSMutableDictionary alloc] init];        }        [parentView.wgInfo.vc.PathedSubViews setValue: subview forKey: subviewInSubviewPath];        //Flannian anchor tbd        if(subview.wgInfo==nil){            [self bindWGInfoToView:subview properties:subviewOption inPath:subviewInSubviewPath parentView:parentView];        }        if(subview.wgInfo.bindView != nil) {            //移除先有的，不然在添加后可能覆盖            NSMutableDictionary *collectionDictionary = [NSMutableDictionary dictionaryWithDictionary: subviewOption];//            if([collectionDictionary objectForKey:@"frame"] != nil) {//                [collectionDictionary removeObjectForKey:@"frame"];//            }//            if([collectionDictionary objectForKey:@"hidden"] != nil) {//                [collectionDictionary removeObjectForKey:@"hidden"];//            }//            if([collectionDictionary objectForKey:@"anchor"] != nil) {//                [collectionDictionary removeObjectForKey:@"anchor"];//            }            [self bindWGInfoToView:subview.wgInfo.bindView properties:collectionDictionary inPath:subviewInSubviewPath parentView:subview];        }                [parentView addSubview:subview];        [self applyPropertiesToView:subview properties:subviewOption inPath:subviewInSubviewPath forParentView:parentView];        if(subviewsInSubview != nil) {            //子View中又包含子view            //递归调用            [self loadViewTreeForPlist:plist andViewPath:subviewInSubviewPath forParent:subview.wgInfo.bindView == nil ? subview : subview.wgInfo.bindView];        }        //[self applyPropertiesToView:subview properties:subviewOption inPath:subviewInSubviewPath forParentView:parentView];        if(subview.wgInfo.bindView != nil) {            //移除先有的，不然在添加后可能覆盖            NSMutableDictionary *collectionDictionary = [NSMutableDictionary dictionaryWithDictionary: subviewOption];            if([collectionDictionary objectForKey:@"frame"] != nil) {                [collectionDictionary removeObjectForKey:@"frame"];            }            if([collectionDictionary objectForKey:@"hidden"] != nil) {                [collectionDictionary removeObjectForKey:@"hidden"];            }            if([collectionDictionary objectForKey:@"anchor"] != nil) {                [collectionDictionary removeObjectForKey:@"anchor"];            }            [self applyPropertiesToView:subview.wgInfo.bindView properties:collectionDictionary inPath:subviewInSubviewPath forParentView:subview];                        NSString *type = [subviewOption objectForKey:@"type"];            if ([type isEqualToString:@"slide"]){                WGUIScrollViewViewController *scrollVC = (WGUIScrollViewViewController *)subview.wgInfo.vc;                [self addWidgets:[subviewOption objectForKey: @"subpages"] intoUIViewController:scrollVC];                [scrollVC buildPageControl];            }        }        i++;    }}#pragma mark- 6.判断type 创建view- (UIView *) createViewFromDictionary: (NSDictionary*) subviewOption atPath: (NSString *) path  forParent:(UIView *) parentView{    _tagCount = _tagCount+1;    CGRect frame = CGRectFromString([subviewOption objectForKey:@"frame"]);    NSString *type = [subviewOption objectForKey:@"type"];    UIView *view = nil;    BOOL wgInfoHandled = NO;    BOOL viewPropertiesHandled = NO;    NSLog(@"parentView = %@", parentView.wgInfo);#pragma mark 创建collection        if ([type isEqualToString:@"collection"]) {                WGCollectionViewController *collectionVC =[[WGCollectionViewController alloc] init];        collectionVC.plist = parentView.wgInfo.vc.plist;        collectionVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        collectionVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:collectionVC];        [self bindWGInfoToView:collectionVC.view properties:subviewOption inPath:path parentView:parentView];        [collectionVC buildCollectionView];        collectionVC.view.wgInfo.vc =collectionVC;        collectionVC.view.wgInfo.bindView = collectionVC.collectionView;        view = collectionVC.view;    }#pragma mark 创建tableview    else if ([type isEqualToString:@"tableview"]) {        WGTableViewViewController *tableVC =[[WGTableViewViewController alloc] init];        tableVC.plist = parentView.wgInfo.vc.plist;        tableVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        tableVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:tableVC];        [self bindWGInfoToView:tableVC.view properties:subviewOption inPath:path parentView:parentView];                tableVC.view.wgInfo.vc = tableVC;        tableVC.view.wgInfo.bindView = tableVC.tableView;        wgInfoHandled = YES;        viewPropertiesHandled = YES;                UIView *headerView = [tableVC headerOrFooterView:YES];        if(headerView != nil) {           tableVC.tableView.tableHeaderView = headerView;        }        UIView *footerView = [tableVC headerOrFooterView:NO];        if(footerView != nil) {            tableVC.tableView.tableFooterView = footerView;        }        view = tableVC.view;    }#pragma mark 创建scrollview    else if ([type isEqualToString:@"scrollview"]) {        WGUIScrollViewViewController *scrollVC =[[WGUIScrollViewViewController alloc] init];        scrollVC.plist = parentView.wgInfo.vc.plist;        scrollVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        scrollVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:scrollVC];        [self bindWGInfoToView:scrollVC.view properties:subviewOption inPath:path parentView:parentView];        scrollVC.view.wgInfo.vc = scrollVC;        scrollVC.view.wgInfo.bindView = scrollVC.scrollView;        view = scrollVC.view;    }#pragma mark 创建slide（scrollview升级版）    else if ([type isEqualToString:@"slide"]){        WGUIScrollViewViewController *scrollVC =[[WGUIScrollViewViewController alloc] init];        scrollVC.plist = parentView.wgInfo.vc.plist;        scrollVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        scrollVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:scrollVC];        [self bindWGInfoToView:scrollVC.view properties:subviewOption inPath:path parentView:parentView];        scrollVC.view.wgInfo.vc = scrollVC;        scrollVC.view.wgInfo.bindView = scrollVC.scrollView;viewPropertiesHandled = YES;        view =scrollVC.view;    }#pragma mark 创建pieChart    else if([type isEqualToString:@"pie-chart"]){        WGPieChartViewController *wgPieChartVC = [[WGPieChartViewController alloc] init];        wgPieChartVC.plist = parentView.wgInfo.vc.plist;        wgPieChartVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        wgPieChartVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:wgPieChartVC];        [self bindWGInfoToView:wgPieChartVC.view properties:subviewOption inPath:path parentView:parentView];        wgPieChartVC.view.wgInfo.vc = wgPieChartVC;        wgPieChartVC.view.wgInfo.bindView = wgPieChartVC.wgPieChart;        view = wgPieChartVC.view;    }#pragma mark 创建pieChart    else if([type isEqualToString:@"column-chart"]){        EColumnChartViewController *wgPieChartVC = [[EColumnChartViewController alloc] init];        wgPieChartVC.plist = parentView.wgInfo.vc.plist;        wgPieChartVC.wgDelegate = parentView.wgInfo.vc.wgDelegate;        wgPieChartVC.wgName = [subviewOption objectForKey:@"name"];        [parentView.wgInfo.vc addChildViewController:wgPieChartVC];        [self bindWGInfoToView:wgPieChartVC.view properties:subviewOption inPath:path parentView:parentView];        wgPieChartVC.view.wgInfo.vc = wgPieChartVC;        //wgPieChartVC.view.wgInfo.bindView = wgPieChartVC.eColumnChart;                view = wgPieChartVC.view;    }#pragma mark 创建button    else if ([type isEqualToString:@"button"]){        view =[UIButton buttonWithType:UIButtonTypeCustom];    }#pragma mark 创建image    else if([type isEqualToString:@"image"]) {        view = [[UIImageView alloc] initWithFrame:CGRectZero];    }#pragma mark 创建label    else if ([type isEqualToString:@"label"]){        view = [[WGUILabel alloc]initWithFrame:CGRectZero];    }#pragma mark 创建html    else if ([type isEqualToString:@"html"]){        view = [[DTAttributedLabel alloc]initWithFrame:CGRectZero];    }#pragma mark 创建html+带背景图片自适应    else if ([type isEqualToString:@"message"]){        view = [[DTAttributedTextView alloc]initWithFrame:CGRectZero];    }#pragma mark 创建画手势的视图    else if ([type isEqualToString:@"gesture"]){        view = [[WTMGlyphDetectorView alloc]initWithFrame:CGRectZero];                ((WTMGlyphDetectorView *) view).delegate = self;    }#pragma mark 创建textfield    else if ([type isEqualToString:@"textfield"]){        textfieldView = [[UITextField alloc] initWithFrame:CGRectZero];        textfieldView.delegate = parentView.wgInfo.vc;        view = textfieldView;    }#pragma mark 创建password    else if ([type isEqualToString:@"password"]){        UITextField *textField = [[UITextField alloc] initWithFrame:CGRectZero];        textField.secureTextEntry = YES;        textfieldView.delegate = parentView.wgInfo.vc;        view = textField;    }#pragma mark 创建textview    else if([type isEqualToString:@"textview"]){        UITextView *textview =[[GCPlaceholderTextView alloc] initWithFrame:CGRectZero];        textview.delegate = parentView.wgInfo.vc;        view = textview;    }#pragma mark 创建svg    else if ([type isEqualToString:@"svg"]){        JAMSVGImageView *svgImageView =[[JAMSVGImageView alloc]initWithSVGImage:nil];        view =svgImageView;    }#pragma mark 创建pickerView    else if([type isEqualToString:@"pickerview"]){        UIDatePicker *dataPicker_one = [[UIDatePicker alloc] initWithFrame:frame];        view = dataPicker_one;    }#pragma mark 创建slider    else if ([type isEqualToString:@"slider"]){        UISlider *slider=[[UISlider alloc]initWithFrame:frame];        view =slider;    }#pragma mark 创建filter    else if ([type isEqualToString:@"filter"]){        SEFilterControl *filter = [[SEFilterControl alloc] initWithFrame:frame];//        [filter addTarget:self action:@selector(filterValueChanged:) forControlEvents:UIControlEventValueChanged];        view =filter;    }#pragma mark 创建alertView//    else if ([type isEqualToString:@"alertView"]){//        UIAlertView *alertView = [[UIAlertView alloc]initWithFrame:frame];//        view =alertView;//    }#pragma mark 创建video    else if ([type isEqualToString:@"video"]){        MPMoviePlayerController *moviewPlayer=[[MPMoviePlayerController alloc]init];        view = moviewPlayer.view;        if(parentView.wgInfo.vc.embebControls ==nil) parentView.wgInfo.vc.embebControls = [NSMutableDictionary new];        [parentView.wgInfo.vc.embebControls setObject:moviewPlayer forKey:path];        [moviewPlayer shouldAutoplay];        [moviewPlayer play];    }#pragma mark 创建animation//    else if([type isEqualToString:@"animation"]){//     //    }#pragma mark 创建CircularProgress    else if ([type isEqualToString:@"CircularProgress"]){        view = [[DACircularProgressView alloc]                initWithFrame: CGRectZero];    }#pragma mark 创建LabeledCircularProgress    else if ([type isEqualToString:@"LabeledCircularProgress"]){        view = [[DALabeledCircularProgressView alloc]                initWithFrame: CGRectMake(0, 0, 40, 40)];        DALabeledCircularProgressView *lcpView = (DALabeledCircularProgressView *)view;        //TODO: 变成plist可配置        lcpView.trackTintColor = [UIColor whiteColor];        lcpView.progressTintColor = [UIColor lightGrayColor];        //lcpView.thicknessRatio = 1.0f;        lcpView.clockwiseProgress = YES;        [lcpView.progressLabel setFont:[UIFont systemFontOfSize:11.f]];        [lcpView.progressLabel setTextColor:[UIColor lightGrayColor]];    }    else {        view = [[UIView alloc]initWithFrame:CGRectZero];    }    return view;}#pragma mark - 7.判断当前是否selected- (BOOL) isCellSelected: (UIView *) view {    if([view.wgInfo.vc isKindOfClass:[WGTableViewViewController class]]){        UITableViewController *tableVC = (UITableViewController *) view.wgInfo.vc;        NSArray *items = tableVC.tableView.indexPathsForSelectedRows;        for (NSIndexPath *selectedIndexPath in items) {            if(view.wgInfo.indexpath.section == selectedIndexPath.section && view.wgInfo.indexpath.row == selectedIndexPath.row) {                return YES;            }        }    }    else {        UICollectionViewController *tableVC = (UICollectionViewController *) view.wgInfo.vc;        NSArray *items = tableVC.collectionView.indexPathsForSelectedItems;        for (NSIndexPath *selectedIndexPath in items) {            if(view.wgInfo.indexpath.section == selectedIndexPath.section && view.wgInfo.indexpath.row == selectedIndexPath.row) {                return YES;            }        }    }    return NO;}#pragma mark - 8.动态数据的支持 - 获取plist中的变量数据- (id) defaultValueForParam:(NSString *) paramName tryPathFirst:(NSString *) path ofView: (UIView *) view isSelected: (BOOL) isSelected {    id value = nil;    if(isSelected) {        value = [view.wgInfo.vc.plist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"dataSelected", path]];        if(value != nil) {            return value;        }        else {            value = [_appPlist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"dataSelected", path]];            if(value != nil) {                return value;            }        }    }        value = [view.wgInfo.vc.plist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"data", path]];    if(value != nil) {        return value;    }    else {        value = [_appPlist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"data", path]];        if(value != nil) {            return value;        }        if(isSelected) {            value = [view.wgInfo.vc.plist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"dataSelected", paramName]];            if(value != nil)            {                return value;            }else{                                value = [_appPlist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"dataSelected", paramName]];                if(value != nil)                {                    return value;                }            }        }        value =[view.wgInfo.vc.plist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"data", paramName]];        if(value != nil)        {            return value;        }        return [_appPlist objectFromPath: [NSString stringWithFormat:@"%@/%@", @"data", paramName]];    }}- (id) defaultValueForParam:(NSString *) paramName  key: (NSString *)key ofView: (UIView *) view {    NSDictionary *dict = nil;    NSString *keyPath = nil;    switch (view.wgInfo.containerType) {        case WGViewContainerTypeNormal:        case WGViewContainerTypeTableHeader:        case WGViewContainerTypeTableFooter:            break;        case WGViewContainerTypeCell:{            NSString *path = [NSString stringWithFormat:@"%@/cell/%ld/%ld/%@", view.wgInfo.cName, (long)view.wgInfo.indexpath.section, (long)view.wgInfo.indexpath.row, paramName];            //如果不存在，则添加params            if(view.wgInfo.vc.cellParams == nil) {view.wgInfo.vc.cellParams = [NSMutableDictionary dictionary];}            dict = [NSDictionary dictionaryWithObjectsAndKeys:key,@"key",view.wgInfo.path,@"path", nil];            keyPath = [NSString stringWithFormat:@"%@/%@", view.wgInfo.path, key];            if([view.wgInfo.vc.cellParams objectForKey:keyPath] == nil) {                [view.wgInfo.vc.cellParams setObject:dict forKey:keyPath];            }            return [self defaultValueForParam:paramName tryPathFirst:path ofView:view isSelected:[self isCellSelected: view]];        }            break;        case WGViewContainerTypeSectionHeader:{            NSString *path = [NSString stringWithFormat:@"%@/sectionHeader/%ld/%@", view.wgInfo.cName, (long)view.wgInfo.section, paramName];            return [self defaultValueForParam:paramName tryPathFirst:path ofView:view isSelected:[self isCellSelected: view]];        }            break;        case WGViewContainerTypeSectionFooter: {            NSString *path = [NSString stringWithFormat:@"%@/sectionFooter/%ld/%@", view.wgInfo.cName, (long)view.wgInfo.section, paramName];            return [self defaultValueForParam:paramName tryPathFirst:path ofView:view isSelected:[self isCellSelected: view]];        }            break;        default:            break;    }    return [self defaultValueForParam:paramName tryPathFirst:paramName ofView:view isSelected:NO];}#pragma mark - 动态数据的支持 - 获取plist中的固定数据- (id) defaultValueForKey:(NSString *) key ofView: (UIView *) view {    if(view.wgInfo.properties == nil) return nil;    id value =[view.wgInfo.properties objectForKey:key];    return value;}#pragma mark - 动态数据的支持 - 获取参数化数据- (id) maybeValueOfParam:(id) value key: (NSString *)key ofView: (UIView *) view {    if(value == nil) return nil;    if([value isKindOfClass:[NSString class]]){        if([self isParam:value]) {            NSString *paramName = [value stringByReplacingOccurrencesOfString:@"@" withString:@""];            value = [self defaultValueForParam:paramName key:key ofView:view];            NSObject<WGPageLoaderDelegate> *wgPageLoaderDelegate = view.wgInfo.vc.wgDelegate;            NSLog(@"ddd pageid = %d",view.wgInfo.pageId);            if(wgPageLoaderDelegate != nil) {                //二次取值 之一                if([wgPageLoaderDelegate respondsToSelector:@selector(valueForParam:defaultValue:ofView:withViewInfo:)]) {                    value = [wgPageLoaderDelegate valueForParam:paramName defaultValue: value ofView: view withViewInfo: view.wgInfo];                }                NSDictionary *dict = nil;                NSString *keyPath = nil;                switch (view.wgInfo.containerType) {                    case WGViewContainerTypeNormal:                    case WGViewContainerTypeTableHeader:                    case WGViewContainerTypeTableFooter:                        break;                    case WGViewContainerTypeCell:                        //二次取值 之二                        if([wgPageLoaderDelegate respondsToSelector:@selector(valueForParam:defaultValue:forCellWithIndexPath:ofView:withViewInfo:)]) {                            value = [wgPageLoaderDelegate valueForParam:paramName defaultValue: value forCellWithIndexPath:view.wgInfo.indexpath  ofView: view withViewInfo: view.wgInfo];                        }                        //如果不存在，则添加params                        if(view.wgInfo.vc.cellParams == nil) {view.wgInfo.vc.cellParams = [NSMutableDictionary dictionary];}                        dict = [NSDictionary dictionaryWithObjectsAndKeys:key,@"key",view.wgInfo.path,@"path", nil];                        keyPath = [NSString stringWithFormat:@"%@/%@", view.wgInfo.path, key];                        if([view.wgInfo.vc.cellParams objectForKey:keyPath] == nil) {                            [view.wgInfo.vc.cellParams setObject:dict forKey:keyPath];                        }                        break;                    case WGViewContainerTypeSectionHeader:                        //二次取值 之二                        if([wgPageLoaderDelegate respondsToSelector:@selector(valueForParam:defaultValue:forHeaderInSection:ofView:withViewInfo:)]) {                            value = [wgPageLoaderDelegate valueForParam:paramName defaultValue: value forHeaderInSection:view.wgInfo.section  ofView: view withViewInfo: view.wgInfo];                        }                        //如果不存在，则添加params                        if(view.wgInfo.vc.headerParams == nil) {view.wgInfo.vc.headerParams = [NSMutableDictionary dictionary];}                        dict = [NSDictionary dictionaryWithObjectsAndKeys:key,@"key",view.wgInfo.path,@"path", nil];                        keyPath = [NSString stringWithFormat:@"%@/%@", view.wgInfo.path, key];                        if([view.wgInfo.vc.headerParams objectForKey:keyPath] == nil) {                            [view.wgInfo.vc.headerParams setObject:dict forKey:keyPath];                        }                        break;                    case WGViewContainerTypeSectionFooter:                        //二次取值 之二                        if([wgPageLoaderDelegate respondsToSelector:@selector(valueForParam:defaultValue:forFooterInSection:ofView:withViewInfo:)]) {                            value = [wgPageLoaderDelegate valueForParam:paramName defaultValue: value forFooterInSection:view.wgInfo.section  ofView: view withViewInfo: view.wgInfo];                        }                        //如果不存在，则添加params                        if(view.wgInfo.vc.footerParams == nil) {view.wgInfo.vc.footerParams = [NSMutableDictionary dictionary];}                        dict = [NSDictionary dictionaryWithObjectsAndKeys:key,@"key",view.wgInfo.path,@"path", nil];                        keyPath = [NSString stringWithFormat:@"%@/%@", view.wgInfo.path, key];                        if([view.wgInfo.vc.footerParams objectForKey:keyPath] == nil) {                            [view.wgInfo.vc.footerParams setObject:dict forKey:keyPath];                        }                        break;                    default:                        break;                }            }        }    }    return value;}#pragma mark - 动态数据的支持- (id) valueForKey: (NSString *) key ofView: (UIView *) view {    NSObject<WGPageLoaderDelegate> *wgPageLoaderDelegate =  view.wgInfo.vc.wgDelegate;    id value = nil;    if(wgPageLoaderDelegate == nil) {        //获取plist中的变量数据        if([key isEqualToString:@"name"] || [key isEqualToString:@"default"]) {            value = [self defaultValueForParam:key key:key ofView:view];        }        else {            value = [self maybeValueOfParam:[self defaultValueForKey:key ofView: view] key:key ofView:view];        }        return value;    }    else {        //二次取值        if([key isEqualToString:@"name"] || [key isEqualToString:@"default"]) {            value = [self defaultValueForParam:key key:key ofView:view];        }        else {            value = [self defaultValueForKey:key ofView: view];        }        if([wgPageLoaderDelegate respondsToSelector:@selector(valueForKey:defaultValue:ofView:withViewInfo:)]) {            value = [wgPageLoaderDelegate valueForKey:key defaultValue:value  ofView: view withViewInfo: view.wgInfo];        }        switch (view.wgInfo.containerType) {            case WGViewContainerTypeNormal:                break;            case WGViewContainerTypeCell:                //二次取值 之二                if([wgPageLoaderDelegate respondsToSelector:@selector(valueForKey:defaultValue:forCellWithIndexPath:ofView:withViewInfo:)]) {                    value = [wgPageLoaderDelegate valueForKey:key defaultValue: value forCellWithIndexPath:view.wgInfo.indexpath  ofView: view withViewInfo: view.wgInfo];                }                break;            case WGViewContainerTypeSectionHeader:                //二次取值 之二                if([wgPageLoaderDelegate respondsToSelector:@selector(valueForKey:defaultValue:forHeaderInSection:ofView:withViewInfo:)]) {                    value = [wgPageLoaderDelegate valueForKey:key defaultValue: value forHeaderInSection:view.wgInfo.section  ofView: view withViewInfo: view.wgInfo];                }                break;            case WGViewContainerTypeSectionFooter:                //二次取值 之二                if([wgPageLoaderDelegate respondsToSelector:@selector(valueForKey:defaultValue:forFooterInSection:ofView:withViewInfo:)]) {                    value = [wgPageLoaderDelegate valueForKey:key defaultValue: value forFooterInSection:view.wgInfo.section  ofView: view withViewInfo: view.wgInfo];                }                break;            default:                break;        }        return [self maybeValueOfParam:value key:key ofView:view];    }}#pragma mark- 通用的绑定UIView的信息- (void) bindWGInfoToView: (UIView *) view properties: (NSDictionary *) subviewOption inPath: (NSString *)path  parentView:(UIView *) parentView{    WGViewInfo *wgInfo = [WGViewInfo new];    wgInfo.pageId = parentView.wgInfo.pageId;    if((parentView !=nil) && (parentView.wgInfo != nil)) {        wgInfo.cellpath = parentView.wgInfo.cellpath;        wgInfo.section = parentView.wgInfo.section;        wgInfo.containerType = parentView.wgInfo.containerType;        wgInfo.pageId = parentView.wgInfo.pageId;        wgInfo.indexpath = parentView.wgInfo.indexpath;        wgInfo.cName = parentView.wgInfo.cName;        wgInfo.vc = parentView.wgInfo.vc;    }    else {        wgInfo.containerType = WGViewContainerTypeNormal;    }    wgInfo.path = path;    wgInfo.properties = [NSMutableDictionary dictionaryWithDictionary:subviewOption];    NSLog(@"wgInfo = %@", wgInfo);    view.wgInfo = wgInfo;}#pragma mark - 6.3.1 根据是否在里面有特殊符号 @，判断是否为参数- (BOOL) isParam: (NSString *) value {    return ([value length] > 0 && [value characterAtIndex:0] == '@');}#pragma mark - 菜单的支持- (NSInteger) getMenuPageId {    return _menuMainPageId;}- (void) setMenuMainPage: (NSInteger) pageId {    [self replacePage:_menuMainPageId WithPage:pageId];    _menuMainPageId = pageId;}#pragma mark - 通过pageid和path，获取子视图-(id) getSubviewByPath:(NSString *)path inViewController:(UIViewController *) viewController {    WGBaseViewController * vc =(WGBaseViewController *)viewController;    if([path isEqualToString:@"/"]) {        return vc.view;    }    else {        id subview =[vc.PathedSubViews objectForKey: path];        return subview;    }}-(id)getSubviewByPath:(NSString *)path andInPage:(NSInteger)pageid{    UIViewController *pageVC = [self getViewControllerOfPage:pageid];    return [self getSubviewByPath:path inViewController:pageVC];}#pragma mark - 通过pageid和path，获得Scrollview-(UIScrollView *) getScrollviewByPath:(NSString *)path inViewController:(UIViewController *) viewController {    UIView *parentView = [self getSubviewByPath:path inViewController:viewController];    return (UIScrollView *) parentView.wgInfo.bindView;}-(UIScrollView *) getScrollviewByPath:(NSString *)path andInPage:(NSInteger)pageid {    UIView *parentView = [self getSubviewByPath:path andInPage:pageid];    NSLog(@"getScrollviewByPath %@",parentView.wgInfo);    return (UIScrollView *) parentView.wgInfo.bindView;}#pragma mark - 通过pageid和path，获得Tableview-(UITableView *) getTableviewByPath:(NSString *)path andInPage:(NSInteger)pageid {    return (UITableView *) [self getScrollviewByPath:path andInPage:pageid];}-(UITableView *) getTableviewByPath:(NSString *)path inViewController:(UIViewController *) viewController {    return (UITableView *) [self getScrollviewByPath:path inViewController:viewController];}#pragma mark - 通过pageid和path，获得CollectionView-(UICollectionView *) getCollectionviewByPath:(NSString *)path andInPage:(NSInteger)pageid {    return (UICollectionView *) [self getScrollviewByPath:path andInPage:pageid];}-(UICollectionView *) getCollectionviewByPath:(NSString *)path inViewController:(UIViewController *) viewController {    return (UICollectionView *) [self getScrollviewByPath:path inViewController:viewController];}#pragma mark - 通过pageid和path，获取控制器，比如video-(id) getEmbedControlByPath:(NSString *)path andInPage:(NSInteger)pageid {    WGBaseViewController * vc =(WGBaseViewController *)[self getViewControllerOfPage:pageid];    id control =[vc.embebControls objectForKey: path];    return control;}#pragma mark - 替换页面-(void) replacePage:(NSInteger)fromPageid WithPage:(NSInteger) ToPageid{    if(fromPageid == ToPageid) {return;}    WGBaseViewController *oldPage = (WGBaseViewController *)[pageLoader getViewControllerOfPage:fromPageid];    WGBaseViewController *newPage = (WGBaseViewController *)[pageLoader getViewControllerOfPage:ToPageid];     NSMutableArray *viewControllers = [NSMutableArray arrayWithArray:oldPage.navigationController.viewControllers];     [viewControllers removeLastObject];     [viewControllers addObject:newPage];     [oldPage.navigationController setViewControllers:viewControllers animated:YES];}#pragma mark - 位置尺寸自适应的支持。- (void) applyAutoresizeMask: (CGRect) anchor ToView: (UIView *)view {    UIViewAutoresizing resize = UIViewAutoresizingNone;    if(anchor.origin.x == 1.f && anchor.size.width == 1.f) {        resize = resize | UIViewAutoresizingFlexibleWidth;    }    else if(anchor.origin.x == 1.f && anchor.size.width == 0.f) {        resize = resize | UIViewAutoresizingFlexibleRightMargin;    }    else if(anchor.origin.x == 0.f && anchor.size.width == 1.f) {        resize = resize | UIViewAutoresizingFlexibleLeftMargin;    }    else if(anchor.origin.x == 0.5f && anchor.size.width == 0.5f) {        resize = resize | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin;    }    if(anchor.origin.y == 1.f && anchor.size.height == 1.f) {        resize = resize | UIViewAutoresizingFlexibleHeight;    }    else if(anchor.origin.y == 1.f && anchor.size.height == 0.f) {        resize = resize | UIViewAutoresizingFlexibleBottomMargin;    }    else if(anchor.origin.y == 0.f && anchor.size.height == 1.f) {        resize = resize | UIViewAutoresizingFlexibleTopMargin;    }    else if(anchor.origin.y == 0.5f && anchor.size.height == 0.5f) {        resize = resize | UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleBottomMargin;    }    [view setAutoresizingMask:resize];}- (NSString *) realResourcePath: (NSString *) path {    if([path rangeOfString:@"./"].length > 0 && [path rangeOfString:@".bundle"].length == 0) {        path = [NSString stringWithFormat:@"./%@.bundle/%@", _bundleName, path];    }    return path;}#pragma mark - 8. 对图片的支持，含字体的支持。- (UIImage *) imageFromResourcePath: (NSString *) path {    //字体图片：font-zocial-acrobat-20.5    if([path rangeOfString:@"font-"].length > 0) {        if([path rangeOfString:@"font-"].length > 0) {            static dispatch_once_t onceToken;            dispatch_once(&onceToken, ^{                [FAKIcon registerIconFontWithURL: [_bundle URLForResource:@"./fonts/zocial-regular-webfont" withExtension:@"ttf"]];            });            FAKZocial *cogIcon = [FAKZocial acrobatIconWithSize:20];            [cogIcon addAttribute:NSForegroundColorAttributeName value:[UIColor redColor]];            return [cogIcon imageWithSize:CGSizeMake(20, 20)];        }        else {            return nil;        }    }    else if([path rangeOfString:@"http"].length > 0) {        NSURL *url = [NSURL URLWithString:path];        NSData *imageData = [NSData dataWithContentsOfURL:url];        return [[UIImage alloc] initWithData:imageData];    }    else {        return [UIImage imageNamed:[self realResourcePath:path]];    }}- (NSString *)stringByDecodingXMLEntities: (NSString *) string{    NSUInteger myLength = [string length];    NSUInteger ampIndex = [string rangeOfString:@"&" options:NSLiteralSearch].location;        // Short-circuit if there are no ampersands.    if (ampIndex == NSNotFound) {        return string;    }    // Make result string with some extra capacity.    NSMutableString *result = [NSMutableString stringWithCapacity:(myLength * 1.25)];        // First iteration doesn't need to scan to & since we did that already, but for code simplicity's sake we'll do it again with the scanner.    NSScanner *scanner = [NSScanner scannerWithString:string];        [scanner setCharactersToBeSkipped:nil];        NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];        do {        // Scan up to the next entity or the end of the string.        NSString *nonEntityString;        if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {            [result appendString:nonEntityString];        }        if ([scanner isAtEnd]) {            goto finish;        }        // Scan either a HTML or numeric character entity reference.        if ([scanner scanString:@"&amp;" intoString:NULL])            [result appendString:@"&"];        else if ([scanner scanString:@"&apos;" intoString:NULL])            [result appendString:@"'"];        else if ([scanner scanString:@"&quot;" intoString:NULL])            [result appendString:@"\""];        else if ([scanner scanString:@"&lt;" intoString:NULL])            [result appendString:@"<"];        else if ([scanner scanString:@"&gt;" intoString:NULL])            [result appendString:@">"];        else if ([scanner scanString:@"&#" intoString:NULL]) {            BOOL gotNumber;            uint32_t unicodeInt;            NSString *xForHex = @"";            // Is it hex or decimal?            if ([scanner scanString:@"x" intoString:&xForHex]) {                gotNumber = [scanner scanHexInt:&unicodeInt];            }            else {                gotNumber = [scanner scanInt:(int*)&unicodeInt];            }            if (gotNumber) {                unicodeInt = OSSwapHostToLittleInt32(unicodeInt); // To make it byte-order safe                NSString *unicodeString = [[NSString alloc] initWithBytes:&unicodeInt length:4 encoding:NSUTF32LittleEndianStringEncoding];                [result appendString:unicodeString];                [scanner scanString:@";" intoString:NULL];            }            else {                NSString *unknownEntity = @"";                [scanner scanUpToCharactersFromSet:boundaryCharacterSet intoString:&unknownEntity];                [result appendFormat:@"&#%@%@", xForHex, unknownEntity];                NSLog(@"Expected numeric character entity but got &#%@%@;", xForHex, unknownEntity);            }        }        else {            NSString *amp;            [scanner scanString:@"&" intoString:&amp];  //an isolated & symbol            [result appendString:amp];        }    }    while (![scanner isAtEnd]);finish:    return result;}- (NSString *) realTitle: (NSString *) title {    if([title rangeOfString:@"&#"].length > 0) {        return [NSString stringWithFormat:@"%@",[self stringByDecodingXMLEntities:title]];    }    else if([title rangeOfString:@".txt"].length > 0) {        NSError *error;        NSString *txt = [NSString stringWithContentsOfFile:[_bundle pathForResource:title ofType:nil] encoding:NSUnicodeStringEncoding error:&error];                NSLog(@"%@ %@", [_bundle pathForResource:title ofType:nil], [error localizedDescription]);        return txt;    }    else {        return title;    }}- (NSString *) fontFamilyNamed: (NSString *) textFontFamily {    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        _iconFontPaths = [NSMutableDictionary dictionary];    });    NSString *iconFontFilePath = [NSString stringWithFormat:@"fonts/%@", textFontFamily];    if([_iconFontPaths objectForKey:textFontFamily]==nil) {        [_iconFontPaths setObject:iconFontFilePath forKey:textFontFamily];        NSURL *url = [_bundle URLForResource:iconFontFilePath withExtension:@"ttf"];        if(url!=nil) {            [FAKIcon registerIconFontWithURL: url];        }    }    return textFontFamily;}- (NSInteger) getSiblingViewIndex:(NSString *) str {    NSScanner *scanner = [NSScanner scannerWithString:str];    [scanner setCharactersToBeSkipped:nil];        BOOL gotNumber;    int unicodeInt;    gotNumber = [scanner scanInt:&unicodeInt];    if(!gotNumber) {        return -1;    } else {        if([scanner scanString:@"." intoString:NULL]) {            return unicodeInt;        }        else {            return -1;        }    }}-(UIView *)getViewAtIndex:(NSInteger)index andParentView:(UIView *)parentView{        if(index >= 0 ) {        NSString *subviewPath = [NSString stringWithFormat:@"%@/subviews/%ld",parentView.wgInfo.path, (long)index];        NSArray *arraySubviews = [parentView subviews];        for (UIView *subview in arraySubviews) {            NSLog(@"getViewAtIndex subviewPath = %@, wgInfo.path = %@",subviewPath, subview.wgInfo.path);            if([subview.wgInfo.path isEqualToString:subviewPath]) {                NSLog(@"getViewAtIndex subviewPath found = %@, wgInfo.path = %@",subviewPath, subview.wgInfo.path);                return subview;            }        }    }    return nil;}//找到当前View的在父级view中的序号- (NSInteger) getViewIndexOfView: (UIView *) view {    NSString *myPath = view.wgInfo.path;    NSRange theRange = [myPath rangeOfString:@"/" options:NSBackwardsSearch];    NSString *lastPathComponent = nil;    if (theRange.location != NSNotFound) {        lastPathComponent = [myPath substringFromIndex:theRange.location+1];        return [lastPathComponent integerValue];    }    else {        return -1;    }}#pragma mark - 7.001. 找到具有相同父级的，相邻的前一个view。- (UIView *) foundPrevViewOfView: (UIView *) view forParentView: (UIView *) parentView {    NSInteger myIndex = [self getViewIndexOfView: view];    if(myIndex > 0 ) {        return [self getViewAtIndex:myIndex-1 andParentView:parentView];    }    return nil;}-(MASViewAttribute *)getViewAttribute:(NSString *)topStr andView:(UIView *)myView{    MASViewAttribute *top ;    if ([topStr rangeOfString:@".top"].length>0) {        top = myView.top;    }    else if ([topStr rangeOfString:@".bottom"].length>0){        top = myView.bottom;    }    else if ([topStr rangeOfString:@".right"].length>0){        top = myView.right;    }else if ([topStr rangeOfString:@".left"].length>0){        top =myView.left;    }else if ([topStr rangeOfString:@".width"].length>0){        top =myView.width;    }else if ([topStr rangeOfString:@".height"].length>0){        top =myView.height;    }else if ([topStr rangeOfString:@".leading"].length>0){        top =myView.leading;    }else if ([topStr rangeOfString:@".trailing"].length>0){        top =myView.trailing;    }    else if ([topStr rangeOfString:@".centerX"].length>0){        top =myView.centerX;    }    else if ([topStr rangeOfString:@".centerY"].length>0){        top =myView.centerY;    }    else if ([topStr rangeOfString:@".baseline"].length>0){        top =myView.baseline;    }    return top;}-(MASViewAttribute *)getViewAttribute:(NSString *)topStr andView:(UIView *)view  andParentView:(UIView *)parentView{    MASViewAttribute *top ;    if ([topStr rangeOfString:@"parent."].length > 0){        //Todo: 取parent view中的值//left， right， bottom， top        top = [self getViewAttribute:topStr andView:parentView];    }    //同级相邻元素    else if([topStr rangeOfString:@"prev."].length > 0){                UIView *preView =[self foundPrevViewOfView:view forParentView:  parentView];        if(preView == nil) return nil;        top = [self getViewAttribute:topStr andView:preView];    }    //同级元素    else {        NSInteger topIndex = [self getSiblingViewIndex:topStr];        if(topIndex >= 0) {            //Todo: 取父级view的第top个子元素中的值            UIView *myView = [self getViewAtIndex:topIndex andParentView:parentView];            if(myView == nil) return nil;            top = [self getViewAttribute:topStr andView:myView];        }        else {            //Todo：认为设置了固定值            CGFloat topFloat = [self realFontSize:topStr];            top = @(topFloat);        }    }    return top;}#pragma mark - n. 吸附定位方式，得到正数负数的偏移值。-(CGFloat) getOffsetFromAnchorString: (NSString *) str {    NSScanner *scanner = [NSScanner scannerWithString:str];    NSCharacterSet *divider = [NSCharacterSet characterSetWithCharactersInString:@"+-"];    NSCharacterSet *numbers = [NSCharacterSet characterSetWithCharactersInString:@"0123456789+-"];    NSString *numberString;    NSString *plusMinusString;    // Throw away characters before the first number.    [scanner scanUpToCharactersFromSet:divider intoString:NULL];    if(![scanner scanCharactersFromSet:divider intoString:&plusMinusString]) {        return 0;    }    if([plusMinusString isEqualToString:@"+"]) {        plusMinusString = @"";    }    // Collect numbers.    if([scanner scanCharactersFromSet:numbers intoString:&numberString]) {        NSLog(@"getOffsetFromAnchorString  = %@", [NSString stringWithFormat:@"%@%@", plusMinusString,numberString]);        return [[NSString stringWithFormat:@"%@%@", plusMinusString,numberString] floatValue];    }    else {        return 0;    }}//parent.width*100+32.5//parent.width+32.5//parent.width-32.5//prev.width-32.5//0.width-32.5- (CGFloat) getNumberFromExpressionString: (NSString *) str key: (NSString *) key{    NSScanner *scanner = [NSScanner scannerWithString:str];    NSCharacterSet *divider = [NSCharacterSet characterSetWithCharactersInString:key];    NSCharacterSet *numbers = [NSCharacterSet characterSetWithCharactersInString:@"0123456789d+-"];    NSString *numberString;    NSString *plusMinusString;    // Throw away characters before the first number.    [scanner scanUpToCharactersFromSet:divider intoString:NULL];    if(![scanner scanCharactersFromSet:divider intoString:&plusMinusString]) {        return 0;    }    if([plusMinusString isEqualToString:@"+"]) {        plusMinusString = @"";    }    // Collect numbers.    if([scanner scanCharactersFromSet:numbers intoString:&numberString]) {        NSLog(@"getOffsetFromAnchorString  = %@", [NSString stringWithFormat:@"%@%@", plusMinusString,numberString]);                CGFloat realNumber = [self realFontSize:numberString];                return [plusMinusString isEqualToString:@"-"] ? -realNumber : realNumber;    }    else {        return 0;    }}#pragma mark - 获得根据设备宽度系数修正后的offset- (CGFloat) getDeviceOffsetNumber: (NSString *) numberString {    BOOL isNegative = NO;    if([numberString rangeOfString:@"-"].length > 0) {        isNegative = YES;        numberString = [numberString stringByReplacingOccurrencesOfString:@"-" withString:@""];    }        CGFloat realNumber = [self realFontSize:numberString];        return isNegative ? -realNumber : realNumber;}#pragma mark - n. 吸附定位方式，得到正数负数的加倍系数。- (NSDictionary *) parseFromAnchorString: (NSString *) str {    //str = @"prev.width-32.5";    //str = @"prev.width/-5.5+32.5";    NSError* regexError = nil;    NSString *pattern = @"([\\w]+)\\.([\\w]+)([\\*/]*)([-]*d*[0-9\\.]*)([+-]*[d0-9\\.]*)";    NSRegularExpression* regex = [NSRegularExpression regularExpressionWithPattern:pattern        options:NSRegularExpressionCaseInsensitive|NSRegularExpressionDotMatchesLineSeparators        error:&regexError];        if (regexError)    {        NSLog(@"Regex creation failed with error: %@", [regexError description]);        return nil;    }        NSArray* matches = [regex matchesInString:str                                      options:NSMatchingWithoutAnchoringBounds                                         range:NSMakeRange(0, str.length)];    NSLog(@"matches = %@",matches);        if ([matches count]) {        NSMutableDictionary *result = [NSMutableDictionary dictionary];        NSTextCheckingResult *firstMatch = [matches objectAtIndex:0];        NSLog(@"Found %lu submatches", (unsigned long)[firstMatch numberOfRanges]);        for (NSUInteger i = 0; i < [firstMatch numberOfRanges]; ++i) {            NSRange range = [firstMatch rangeAtIndex:i];                                    NSString *submatch = [str substringWithRange:range];            if(![submatch isEqualToString:@""]) {                if(i ==1) {                    [result setObject:submatch forKey:@"target"];                }                else if(i ==2) {                    [result setObject:submatch forKey:@"property"];                }                else if(i ==3) {                    [result setObject:submatch forKey:@"multiply"];                }                else if(i ==4) {                    if([result objectForKey:@"multiply"] == nil) {                        [result setObject:[NSNumber numberWithFloat:[self getDeviceOffsetNumber:submatch]] forKey:@"offset"];                    }                    else {                        [result setObject:[NSNumber numberWithFloat:[submatch floatValue]] forKey:@"multiplyValue"];                    }                }                else if(i ==5) {//                    CGFloat realNumber = [self realFontSize:submatch];                    [result setObject:[NSNumber numberWithFloat:[self getDeviceOffsetNumber:submatch]] forKey:@"offset"];                }            }        }        NSLog(@"parse result %@", result);        return result;    } else {        NSLog(@"Pattern <%@> doesn't match string <%@>", pattern, str);    }    return nil;}//是否为新的定位模式-(BOOL)isNewAnchorType:(id)anchor{    if ([anchor isKindOfClass:[NSDictionary class]]) {        return YES;    }else{        return NO;    }}#pragma mark - 7. 对各种类型的UIView进行统一处理。- (void) applyPropertiesToView: (UIView *) view properties: (NSDictionary *) subviewOption inPath: (NSString *)path forParentView: (UIView *) parentView {    if(view.superview == nil) {[parentView addSubview:view];}    //所有UIView都有的属性     //frame大小    NSString *frameStr = [self valueForKey:@"frame" ofView:view];    if(frameStr != nil) {        frameStr = [self valueForKey:@"frame" ofView:view];        CGRect frame = CGRectFromString(frameStr);        view.frame = frame;        if([view respondsToSelector:@selector(alignBottom)]){            [view performSelector:@selector(alignBottom) withObject:nil];        }    }        //anchorStr自适应    NSString *anchorStr = [self valueForKey:@"anchor" ofView:view];    if ([self isNewAnchorType:anchorStr]) {            CGRect frame = CGRectFromString(frameStr);            NSDictionary *anchors = (NSDictionary *)anchorStr;            for (NSString *key in anchors) {                NSString *str = [(NSDictionary *)anchorStr objectForKey:key];                                if([key rangeOfString:@"edges"].length>0){                    continue;                }                                MASViewAttribute *achorAtrr = nil;                if (str != nil) {                    achorAtrr =[self getViewAttribute:str andView:view  andParentView:parentView];                }                //CGFloat offset = [self getOffsetFromAnchorString: str];                //CGFloat multiplier = [self getMultiplierFromAnchorString: str];                                if(achorAtrr != nil) {                    NSDictionary *anchorDict = [self parseFromAnchorString: str];                    NSNumber *offset = [anchorDict objectForKey:@"offset"];                    NSString *multiply = [anchorDict objectForKey:@"multiply"];                    NSNumber *multiplyValue = [anchorDict objectForKey:@"multiplyValue"];                                        [view updateConstraints:^(MASConstraintMaker *make) {                        MASConstraint *cs = nil;                        if([key isEqualToString:@"top"]) {                            cs = make.top;                        }                        else if([key isEqualToString:@"bottom"]) {                            cs = make.bottom;                        }                        else if([key isEqualToString:@"left"]) {                            cs = make.left;                        }                        else if([key isEqualToString:@"right"]) {                            cs = make.right;                        }                        else if([key isEqualToString:@"width"]) {                            cs = make.width;                        }                        else if([key isEqualToString:@"height"]) {                            cs = make.height;                        }                        else if([key isEqualToString:@"leading"]) {                            cs = make.leading;                        }                        else if([key isEqualToString:@"trailing"]) {                            cs = make.trailing;                        }                        else if([key isEqualToString:@"centerX"]) {                            cs = make.centerX;                        }                        else if([key isEqualToString:@"centerY"]) {                            cs = make.centerY;                        }                        else if([key isEqualToString:@"baseline"]) {                            cs = make.baseline;                        }                        else {                            return;                        }                                                if(cs!=nil){                            cs.equalTo(achorAtrr);                                                if(offset!=nil) {                            cs.offset([offset floatValue]);                        }                                                if(multiply !=nil) {                            if([multiply isEqualToString:@"*"]) {                                cs.multipliedBy([multiplyValue floatValue]);                            }                            else {                                cs.dividedBy([multiplyValue floatValue]);                            }                        }                        }                    }];                }            }            if(view.superview != nil) {                NSString *edgesStr =[(NSDictionary *)anchorStr objectForKey:@"edges"];                if(edgesStr != nil) {                    UIEdgeInsets padding = UIEdgeInsetsFromString(edgesStr);                    //height = @(frame.size.height);                    [view updateConstraints:^(MASConstraintMaker *make) {                        make.edges.equalTo(view.superview).with.insets(padding);                        make.width.equalTo(view.superview).offset(-padding.left-padding.right);                        //make.height.equalTo(view.superview).offset(-padding.top-padding.bottom);                    }];                }                NSString *topEdgesStr =[(NSDictionary *)anchorStr objectForKey:@"top-edges"];                if(topEdgesStr != nil) {                    UIEdgeInsets padding = UIEdgeInsetsFromString(topEdgesStr);                    //height = @(frame.size.height);                    [view updateConstraints:^(MASConstraintMaker *make) {                        make.top.equalTo(view.superview).offset(padding.top);                        make.left.equalTo(view.superview).offset(padding.left);                        make.right.equalTo(view.superview).offset(padding.right);                        make.width.equalTo(view.superview).offset(-padding.left-padding.right);                        //make.height.equalTo(view.superview).offset(-20);                    }];                }                NSString *bottomEdgesStr =[(NSDictionary *)anchorStr objectForKey:@"bottom-edges"];                if(bottomEdgesStr != nil) {                    UIEdgeInsets padding = UIEdgeInsetsFromString(bottomEdgesStr);                    //height = @(frame.size.height);                    [view updateConstraints:^(MASConstraintMaker *make) {                        make.bottom.equalTo(view.superview).offset(padding.bottom);                        make.left.equalTo(view.superview).offset(padding.left);                        make.right.equalTo(view.superview).offset(padding.right);                        make.width.equalTo(view.superview).offset(-padding.left-padding.right);                        //make.height.equalTo(view.superview).offset(-20);                    }];                }                NSString *hEdgesStr =[(NSDictionary *)anchorStr objectForKey:@"h-edges"];                if(hEdgesStr != nil) {                    UIEdgeInsets padding = UIEdgeInsetsFromString(hEdgesStr);                    //height = @(frame.size.height);                    [view updateConstraints:^(MASConstraintMaker *make) {                        make.left.equalTo(view.superview).offset(padding.left);                        make.right.equalTo(view.superview).offset(padding.right);                        make.width.equalTo(view.superview).offset(-padding.left-padding.right);                        //make.height.equalTo(view.superview).offset(-20);                    }];                }            }        }else{            CGRect anchor = CGRectFromString(anchorStr);            [self applyAutoresizeMask: anchor ToView: view];        }    //tag值    NSNumber *tag = [self valueForKey:@"tag" ofView:view];    if(tag !=nil) {        view.tag = [tag intValue];    }        //自动响应键盘    NSNumber *autoresizeForKeyboard = [self valueForKey:@"autoresize-for-keyboard" ofView:view];    if(autoresizeForKeyboard !=nil && [autoresizeForKeyboard boolValue]) {        NSLog(@"autoresizeForKeyboard view = %@",view.wgInfo);        [view.wgInfo.vc registerForKeyboardNotifications];    }        //隐藏顶部状态栏    NSNumber *statusBarHidden = [self valueForKey:@"status-bar-hidden" ofView:view];    if(statusBarHidden !=nil) {        [[UIApplication sharedApplication] setStatusBarHidden:[statusBarHidden boolValue]];    }        //背景色    NSString *colorWithHexString = [self valueForKey:@"background-color" ofView:view];    if(colorWithHexString!=nil) {        view.backgroundColor =[UIColor colorWithHexString:colorWithHexString];    }    else {        view.backgroundColor =[UIColor clearColor];    }    //渐变背景    NSDictionary *gradientDict = [self valueForKey:@"background-gradient" ofView:view];    if(gradientDict!=nil) {        CAGradientLayer *gradient = [CAGradientLayer layer];        NSString *startPointStr = [gradientDict objectForKey:@"start-point"];        NSString *endPointStr = [gradientDict objectForKey:@"end-point"];        if( startPointStr !=nil && endPointStr != nil) {            CGPoint startPoint = CGPointFromString(startPointStr);            CGPoint endPoint = CGPointFromString(endPointStr);            gradient.startPoint = startPoint;            gradient.endPoint = endPoint;        }        gradient.frame = CGRectMake(0, 0, view.frame.size.width, view.frame.size.height);        NSArray *colors = [gradientDict objectForKey:@"colors"];        if(colors != nil ) {            NSMutableArray *colorss = [NSMutableArray array];            for (NSString *color in colors) {                [colorss addObject:(id)[UIColor colorWithHexString:color].CGColor];            }            gradient.colors = colorss;        }        if([[view.layer sublayers] count]>0) {            [view.layer replaceSublayer:[[view.layer sublayers] firstObject] with:gradient];        }        else {            [view.layer insertSublayer:gradient atIndex:0];        }    }    //是否隐藏    NSNumber *hidden = [self valueForKey:@"hidden" ofView:view];    if(hidden != nil) {        view.hidden = [hidden boolValue];    }    //超出部分是否显示    NSNumber *clipsToBounds = [self valueForKey:@"clipsToBounds" ofView:view];    if(clipsToBounds != nil) {        view.clipsToBounds = [clipsToBounds boolValue];    }    //圆角半径    NSString *radius = [self valueForKey:@"radius" ofView:view];    if (radius!=nil) {        view.layer.masksToBounds = YES;        view.layer.cornerRadius = [self realFontSize: radius];    }    //边框    NSString *border = [self valueForKey:@"border" ofView:view];    if (border!=nil) {        view.layer.borderWidth =[border floatValue];    }    //边框颜色    NSString *borderColor =[self valueForKey:@"border-color"ofView:view];    if (borderColor!=nil) {        view.layer.borderColor =[UIColor colorWithHexString:borderColor].CGColor;    }    //毛玻璃效果    NSString *blur =[self valueForKey:@"blur" ofView:view];    if ((blur != nil) && [blur boolValue]) {        if ([self isIOS7OrHigher]) {            [self addBlurToView:view];        }    }    //点击事件    NSString *touch =[self valueForKey:@"touch" ofView:view];    if(touch != nil) {        view.userInteractionEnabled = YES;        UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(viewTouched:)];        singleTap.cancelsTouchesInView = NO;        [view addGestureRecognizer:singleTap];    }            NSNumber *keyboardHide = [self valueForKey:@"keyboardHide" ofView:view];    if((keyboardHide != nil) && [keyboardHide boolValue]) {          view.userInteractionEnabled = YES;        UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(keyboardHide:)];        //设置成NO表示当前控件响应后会传播到其他控件上，默认为YES。       // tapGestureRecognizer.cancelsTouchesInView = NO;        //将触摸事件添加到当前view        tapGestureRecognizer.cancelsTouchesInView = NO;        [view addGestureRecognizer:tapGestureRecognizer];    }                    NSString *hehe =[self valueForKey:@"hehe" ofView:view];    if (hehe !=nil) {            } #pragma mark 图片专有的属性    if([view isKindOfClass:[UIImageView class]]) {        UIImageView *imgView = (UIImageView *)view;                //图片地址        NSString *src = [self valueForKey:@"src" ofView:imgView];        if(src!=nil) {                        imgView.image = [self imageFromResourcePath: src];                        //文字大小            NSString *fillMode = [self valueForKey:@"mode" ofView:imgView];            if (fillMode!=nil) {                                if([fillMode isEqualToString:@"fill"]) {                    imgView.contentMode = UIViewContentModeScaleAspectFit;                }                else if([fillMode isEqualToString:@"stretch"]) {                    imgView.contentMode = UIViewContentModeScaleToFill;                }                else if([fillMode isEqualToString:@"fillCrop"]) {                    imgView.contentMode = UIViewContentModeScaleAspectFill;                }                else if([fillMode isEqualToString:@"center"]) {                    imgView.contentMode = UIViewContentModeCenter;                }            }            /*            if([self isIOS8OrHigher]) {                [imgView setNeedsLayout];                [imgView layoutIfNeeded];            }            else {                                                [imgView.superview setNeedsLayout];                [imgView.superview layoutIfNeeded];                                [imgView setNeedsLayout];                [imgView layoutIfNeeded];            }            if(imgView.image!=nil && [self isNewAnchorType:anchorStr]){                CGFloat multiplier = ([self fixWidth: CGRectGetWidth(view.bounds)] / imgView.image.size.width);                [imgView updateConstraints:^(MASConstraintMaker *make) {                    make.height.equalTo(@(multiplier * imgView.image.size.height));                }];            }            */                    }    }#pragma mark 按钮专有的属性    else if([view isKindOfClass:[UIButton class]]) {        UIButton *btnView = (UIButton *)view;        //标题显示的支持包括字体库        NSString *title = [self valueForKey:@"title" ofView:btnView];        if(title!=nil) {            [btnView setTitle:[self realTitle:title] forState:UIControlStateNormal];        }                //背景图片地址        NSString *backgroundImage = [self valueForKey:@"background-image" ofView:btnView];        if(backgroundImage!=nil) {             NSString *realPath = [_bundle pathForResource:[NSString stringWithFormat:@"%@",backgroundImage] ofType:nil];            UIImage *image = [UIImage imageWithContentsOfFile:realPath];            NSString *frameStr = [subviewOption objectForKey:@"capInsets"];            if (frameStr!=nil) {                frameStr = [self valueForKey:@"capInsets" ofView:view];                UIEdgeInsets insets = UIEdgeInsetsFromString(frameStr);                UIImage *stretchNormal = [image resizableImageWithCapInsets:insets];                [btnView setBackgroundImage:stretchNormal forState:UIControlStateNormal];                [btnView setBackgroundImage:stretchNormal forState:UIControlStateHighlighted];            }        }        //文字大小        NSString *fontSize = [self valueForKey:@"font-size" ofView:btnView];        if (fontSize!=nil) {            btnView.titleLabel.font =  [UIFont fontWithName:btnView.titleLabel.font.familyName size:[self realFontSize: fontSize]];        }        //文字颜色        NSString *fontColor =[self valueForKey:@"font-color"ofView:btnView];        if(fontColor!=nil) {            [btnView setTitleColor:[UIColor colorWithHexString:fontColor] forState:UIControlStateNormal];        }                                //文字是否加粗        NSNumber *fontBold = [self valueForKey:@"font－bold" ofView:btnView];        if((fontBold != nil) && [fontBold boolValue]) {            [ btnView.titleLabel setFont:[UIFont boldSystemFontOfSize:[fontSize floatValue]]];        }        //是否多行        NSString *wrap = [self valueForKey:@"wrap" ofView:btnView];        if((wrap != nil) && [wrap boolValue]) {             btnView.titleLabel.numberOfLines=0;        }        //文字对齐方式的支持        NSString *textAlignment = [self valueForKey:@"font-alignment" ofView:btnView];        if ([textAlignment isEqualToString:@"center"]){            btnView.contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;        }else if ([textAlignment isEqualToString:@"right"]){            btnView.contentHorizontalAlignment = UIControlContentHorizontalAlignmentRight;        }else{            btnView.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;        }        //字体库的名称        NSString *textFontFamily = [self valueForKey:@"font-family" ofView:btnView];        if(textFontFamily!=nil) {            btnView.titleLabel.font = [UIFont fontWithName:[self fontFamilyNamed: textFontFamily] size: btnView.titleLabel.font.pointSize];            [btnView setNeedsDisplay];        }                if(![self isIOS8OrHigher]){            //自适应            NSString *autosize = [self valueForKey:@"auto-size" ofView:btnView];            if(autosize!=nil && [autosize boolValue]) {                //文本间距                NSString *padding = [self valueForKey:@"padding" ofView:btnView];                if (padding!=nil) {                    btnView.titleEdgeInsets = UIEdgeInsetsFromString(padding);                }                                CGFloat height = [self heightOfText:btnView.titleLabel.text  font:btnView.titleLabel.font      withSuperviewWidth:btnView.frame.size.width];                btnView.frame =CGRectMake(btnView.frame.origin.x, btnView.frame.origin.y, btnView.frame.size.width+(btnView.titleEdgeInsets.left+btnView.titleEdgeInsets.right), height+(btnView.titleEdgeInsets.top +btnView.titleEdgeInsets.bottom));            }        }    }#pragma mark 输入框专有的属性    else if([view isKindOfClass:[UITextField class]]) {        textfieldView = (UITextField *)view;        //占位文字显示的支持        NSString *placeholder = [self valueForKey:@"placeholder" ofView:textfieldView];        if(placeholder!=nil) {            textfieldView.placeholder = [NSString stringWithFormat:@"%@",placeholder];        }                //文字的支持        NSString *title = [self valueForKey:@"title" ofView:textfieldView];        if(title!=nil) {            textfieldView.text = [self realTitle:title];        }        //文字对齐方式的支持        NSString *textAlignment = [self valueForKey:@"font-alignment" ofView:textfieldView];        if ([textAlignment isEqualToString:@"center"]){            textfieldView.textAlignment = NSTextAlignmentCenter;        }        else if ([textAlignment isEqualToString:@"right"]){            textfieldView.textAlignment = NSTextAlignmentRight;        }        else{            textfieldView.textAlignment = NSTextAlignmentLeft;        }                //文字大小        NSString *fontSize = [self valueForKey:@"font-size" ofView:textfieldView];        if (fontSize!=nil) {            textfieldView.font=[UIFont systemFontOfSize:[self realFontSize: fontSize]];        }        //文字颜色        NSString *fontColor =[self valueForKey:@"font-color"ofView:textfieldView];        if(fontColor!=nil) {           textfieldView .textColor=[UIColor colorWithHexString:fontColor];        }        //文字是否加粗        NSNumber *fontBold = [self valueForKey:@"font-bold" ofView:textfieldView];        if((fontBold != nil) && [fontBold boolValue]) {            [textfieldView setFont:[UIFont boldSystemFontOfSize:[fontSize floatValue]]];        }                //键盘类型        NSString *keyboardMode =[self valueForKey:@"keyboard-mode" ofView:textfieldView];        if (keyboardMode!=nil) {            if([keyboardMode isEqualToString:@"decimal"]) {                textfieldView.keyboardType = UIKeyboardTypeDecimalPad;            }            else if([keyboardMode isEqualToString:@"number"]) {                textfieldView.keyboardType = UIKeyboardTypeNumberPad;            }            else if([keyboardMode isEqualToString:@"phone"]) {                textfieldView.keyboardType = UIKeyboardTypePhonePad;            }        }                //行间距        NSString *paddingLeft = [self valueForKey:@"padding-left" ofView:textfieldView];        if(paddingLeft!=nil) {            UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, [paddingLeft floatValue], textfieldView.frame.size.height)];            textfieldView.leftView = paddingView;            textfieldView.leftViewMode = UITextFieldViewModeAlways;        }                //键盘隐藏        NSString *inputView =[self valueForKey:@"input-view-path" ofView:textfieldView];        if (inputView!=nil) {                WGBaseViewController *vc =[self getViewControllerOfPage:[inputView integerValue]];            textfieldView.inputView =vc.view;        }            }#pragma mark 输入文本专有的属性    else if([view isKindOfClass:[UITextView class]]){        GCPlaceholderTextView *textView =(GCPlaceholderTextView *)view;        textView.delegate = self;        //文字的支持        NSString *title = [self valueForKey:@"title" ofView:textView];        if(title!=nil) {            textView.text = [self realTitle:title];        }        //占位文字显示的支持        NSString *placeholder = [self valueForKey:@"placeholder" ofView:textView];        if(placeholder!=nil) {        	textView.placeholder = [NSString stringWithFormat:@"%@",placeholder];        }        //占位文字颜色的支持        NSString *placeholderColor = [self valueForKey:@"placeholder-color" ofView:textView];        if(placeholderColor!=nil) {            textView.placeholderColor = [UIColor colorWithHexString: placeholderColor];        }        //文字大小        NSString *fontSize = [self valueForKey:@"font-size" ofView:textView];        if (fontSize!=nil) {            textView.font = [UIFont systemFontOfSize:[self realFontSize: fontSize]];        }        //文字颜色        NSString *fontColor =[self valueForKey:@"font-color"ofView:textView];        if(fontColor!=nil) {            textView.textColor= [UIColor colorWithHexString:fontColor];        }        //文字是否加粗        NSNumber *fontBold = [self valueForKey:@"font-bold" ofView:textView];        if((fontBold != nil) && [fontBold boolValue]) {            [textView setFont:[UIFont boldSystemFontOfSize:[fontSize floatValue]]];        }        //字体是否编辑        NSNumber*editable = [self valueForKey:@"editable" ofView:textView];        if((editable != nil)) {             textView.editable=[editable boolValue];        }        //行间距        NSString *padding = [self valueForKey:@"padding" ofView:textView];        if(padding!=nil) {            if([self isIOS7OrHigher]){                textView.textContainer.lineFragmentPadding = 0;                textView.textContainerInset = UIEdgeInsetsFromString(padding);            }else {                textView.contentInset = UIEdgeInsetsMake(-11,-8,0,0);            }        }                //键盘隐藏        NSString *inputView =[self valueForKey:@"input-view-path" ofView:textfieldView];        if (inputView!=nil) {                        WGBaseViewController *vc =[self getViewControllerOfPage:[inputView integerValue]];                        textfieldView.inputView =vc.view;                    }    }#pragma mark HTML专有的属性    else if([view isKindOfClass:[DTAttributedLabel class]]) {        DTAttributedLabel *labelView = (DTAttributedLabel *)view;        //标题的支持包括字体库        NSString *title = [self valueForKey:@"title" ofView:labelView];        if(title!=nil) {            labelView.layoutFrameHeightIsConstrainedByBounds = NO;            [self setHTML:title forView:labelView];            //labelView.layoutFrameHeightIsConstrainedByBounds = YES;                //文字自适应大小                NSString *autosize = [self valueForKey:@"auto-size" ofView:labelView];                if(autosize!=nil && [autosize boolValue]) {                                        if([self isIOS8OrHigher]) {                        [labelView setNeedsLayout];                        [labelView layoutIfNeeded];                    }                    else {                                                                        [labelView.superview setNeedsLayout];                        [labelView.superview layoutIfNeeded];                                                [labelView setNeedsLayout];                        [labelView layoutIfNeeded];                    }                                            if(_isFakeViewMode) {                                                                                    if(labelView.bounds.size.width == 0) {                                //NSLog(@"labelView  layoutIfNeeded %@, %@, %f",labelView.text, NSStringFromCGRect(labelView.bounds), [self fixWidth:labelView.bounds.size.width])                                ;                            }                            if(labelView.bounds.size.width > 0) {                                //CGFloat height =  [labelView sizeThatFits:CGSizeMake([self fixWidth:labelView.bounds.size.width], MAXFLOAT)].height;                                NSLog(@"labelView  layoutIfNeeded, %@, %f",NSStringFromCGRect(labelView.bounds), [self fixWidth:labelView.bounds.size.width])                                ;                                CGFloat height =  [labelView suggestedFrameSizeToFitEntireStringConstraintedToWidth:[self fixWidth: labelView.bounds.size.width]].height;                                if(height >0 ) {                                    [labelView mas_makeConstraints:^(MASConstraintMaker *make) {                                        make.height.equalTo(@(height));                                    }];                                    [labelView invalidateIntrinsicContentSize];                                }                            }                        }                    //}                                        //CGFloat height = [self heightOfText:labelView.text font:labelView.font withSuperviewWidth:labelView.bounds.size.width];                    //NSLog(@"autosize label = %ld, %@", (long)height, NSStringFromCGRect(labelView.bounds));                    /*if(view.wgInfo.indexpath == nil) {                     [view mas_updateConstraints:^(MASConstraintMaker *make) {                     make.height.equalTo(@(height));                     }];                     NSLog(@"autosize label = %ld, %@", (long)height, NSStringFromCGRect(labelView.bounds));                     }                     else {*/                                        //[labelView setNeedsLayout];                    //[labelView layoutIfNeeded];//                    CGFloat height =  [labelView suggestedFrameSizeToFitEntireStringConstraintedToWidth:[self fixWidth: labelView.bounds.size.width]].height;//                    //                    //labelView.frame = CGRectMake(labelView.frame.origin.x, labelView.frame.origin.y, labelView.frame.size.width, height);//                    [labelView mas_updateConstraints:^(MASConstraintMaker *make) {//                        make.height.equalTo(@(height)).priority(MASLayoutPriorityRequired);//                    }];                    //}                }                    }    }    #pragma mark Message专有的属性    else if([view isKindOfClass:[DTAttributedTextView class]]) {        DTAttributedTextView *labelView = (DTAttributedTextView *)view;        //标题的支持包括字体库        NSString *title = [self valueForKey:@"title" ofView:labelView];        if(title!=nil) {            labelView.attributedTextContentView.layoutFrameHeightIsConstrainedByBounds = NO;                        NSString *capInsetsStr = [subviewOption objectForKey:@"capInsets"];            UIEdgeInsets insets = UIEdgeInsetsZero;            if (capInsetsStr!=nil) {                insets = UIEdgeInsetsFromString(frameStr);            }                        [labelView.attributedTextContentView updateConstraints:^(MASConstraintMaker *make) {                make.edges.equalTo(labelView).with.insets(insets);                make.width.equalTo(labelView);            }];                        [self setHTML:title forView:labelView];                                    //背景图片地址            NSString *backgroundImage = [self valueForKey:@"background-image" ofView:labelView];            if(backgroundImage!=nil) {                NSString *realPath = [_bundle pathForResource:[NSString stringWithFormat:@"%@",backgroundImage] ofType:nil];//                NSData *imgData = [[NSData alloc] initWithContentsOfFile:realPath];//                UIImage *image = [[UIImage alloc] initWithData:imgData];                UIImage *image = [UIImage imageWithContentsOfFile:realPath];                NSString *frameStr = [subviewOption objectForKey:@"capInsets"];                if (frameStr!=nil) {                    frameStr = [self valueForKey:@"capInsets" ofView:view];                    UIEdgeInsets insets = UIEdgeInsetsFromString(frameStr);                    UIImage *stretchNormal = [image resizableImageWithCapInsets:insets];                                        UIImageView *imageview = [[UIImageView alloc] initWithImage:stretchNormal];                    //                    imageview.frame = labelView.bounds;//                    imageview.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;                                                                              labelView.backgroundView = imageview;                    [imageview updateConstraints:^(MASConstraintMaker *make) {                        make.edges.equalTo(labelView);                        make.width.equalTo(labelView);                    }];                }            }                //文字自适应大小                NSString *autosize = [self valueForKey:@"auto-size" ofView:labelView];                if(autosize!=nil && [autosize boolValue]) {                                        if([self isIOS8OrHigher]) {                        [labelView.attributedTextContentView setNeedsLayout];                        [labelView.attributedTextContentView layoutIfNeeded];                        [labelView setNeedsLayout];                        [labelView layoutIfNeeded];                    }                    else {                                                                        [labelView.superview setNeedsLayout];                        [labelView.superview layoutIfNeeded];                                                [labelView setNeedsLayout];                        [labelView layoutIfNeeded];                    }                   // if(_isFakeViewMode) {                                                //labelView.attributedTextContentView.layoutFrameHeightIsConstrainedByBounds = NO;                        if(labelView.bounds.size.width == 0) {                            //NSLog(@"labelView  layoutIfNeeded %@, %@, %f",labelView.text, NSStringFromCGRect(labelView.bounds), [self fixWidth:labelView.bounds.size.width])                            ;                        }                        if(labelView.bounds.size.width > 0) {                            //CGFloat height =  [labelView sizeThatFits:CGSizeMake([self fixWidth:labelView.bounds.size.width], MAXFLOAT)].height;                            NSLog(@"labelView  layoutIfNeeded, %@, %f",NSStringFromCGRect(labelView.bounds), [self fixWidth:labelView.bounds.size.width])                            ;                            CGFloat height =  [labelView.attributedTextContentView suggestedFrameSizeToFitEntireStringConstraintedToWidth:[self fixWidth: labelView.bounds.size.width]].height;                                                                                    if(height >0 ) {                                if(labelView.backgroundView.frame.size.height > height) {                                    height = labelView.backgroundView.frame.size.height;                                }                                                                [labelView mas_makeConstraints:^(MASConstraintMaker *make) {                                    make.height.equalTo(@(height));                                }];                                //[labelView invalidateIntrinsicContentSize];                            }                        }                   // }                                }                                            }    }    #pragma mark 标签专有的属性    else if([view isKindOfClass:[UILabel class]]) {        WGUILabel *labelView = (WGUILabel *)view;        //标题的支持包括字体库        NSString *title = [self valueForKey:@"title" ofView:labelView];        if(title!=nil) {            labelView.text = [self realTitle:title];                                    NSMutableAttributedString* attrStr = nil;            //字和字的间距            NSString *letterSpacing = [self valueForKey:@"letter-spacing" ofView:labelView];            if (letterSpacing!=nil) {                if(attrStr == nil)                    attrStr = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"%@",labelView.text] ];                                [attrStr addAttribute:NSKernAttributeName value:@([letterSpacing floatValue]) range:NSMakeRange(0, attrStr.length)];                                            }                        //行间距            NSString *lineSpacing = [self valueForKey:@"line-spacing" ofView:labelView];            NSString *firstLineHeadIndent = [self valueForKey:@"firstLineHeadIndent" ofView:labelView];            NSString *headIndent = [self valueForKey:@"headIndent" ofView:labelView];            if (lineSpacing !=nil||firstLineHeadIndent!=nil||headIndent!=nil) {                                if(attrStr == nil)                    attrStr = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"%@",labelView.text] ];                                NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];                if(headIndent != nil)                    paragraphStyle.headIndent = [headIndent floatValue]; // <--- indention if you need it                if(firstLineHeadIndent != nil)                    paragraphStyle.firstLineHeadIndent = [firstLineHeadIndent floatValue];  //首行缩进               if(lineSpacing != nil)                   paragraphStyle.lineSpacing = [lineSpacing floatValue]; // <--- magic line spacing here! 每行缩进                                [attrStr addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, attrStr.length)];                            }                        if(attrStr !=nil)            labelView.attributedText = attrStr;                                }                //选中时显示的问题        NSString *titleSelected = [self valueForKey:@"title-selected" ofView:labelView];        if(titleSelected!=nil) {            [labelView setTextSelected:[self realTitle:titleSelected]];        }                //是否已选中        NSString *selected = [self valueForKey:@"selected" ofView:labelView];        if(selected!=nil) {            labelView.selected = [selected boolValue];        }                //选中文字颜色        NSString *fontColorSelected =[self valueForKey:@"font-color-selected"ofView:labelView];        if(fontColorSelected!=nil) {            [labelView setTextColorSelected:[UIColor colorWithHexString:fontColorSelected]];        }                //字体库名称        NSString *textFontFamily = [self valueForKey:@"font-family" ofView:labelView];        if(textFontFamily!=nil) {            labelView.font = [UIFont fontWithName:[self fontFamilyNamed: textFontFamily] size: labelView.font.pointSize];            [labelView setNeedsDisplay];        }        //背景图        NSString *backgroundImage = [self valueForKey:@"background-image" ofView:labelView];        if(backgroundImage!=nil) {            UIImage *image =[UIImage imageNamed:backgroundImage];            UIColor *color =[UIColor colorWithPatternImage:image];            labelView.backgroundColor =color;        }        //字体大小的支持        NSString *fontSize = [self valueForKey:@"font-size" ofView:labelView];        if(fontSize!=nil) {            labelView.font = [UIFont fontWithName:labelView.font.familyName size:[self realFontSize: fontSize]];        }                //字体大小的支持        NSString *fontSizeSelected = [self valueForKey:@"font-size-selected" ofView:labelView];        if(fontSizeSelected!=nil) {            labelView.textSizeSelected = [self realFontSize: fontSizeSelected];        }                //文字颜色的支持        NSString *textColor = [self valueForKey:@"font-color" ofView:labelView];        if(textColor!=nil) {            labelView.textColor = [UIColor colorWithHexString:textColor];        }        //字体是否加粗        NSNumber*fontBold = [self valueForKey:@"font－bold" ofView:labelView];        if((fontBold != nil) && [fontBold boolValue]) {            labelView.font = [UIFont boldSystemFontOfSize:labelView.font.pointSize];        }        //是否多行        NSString *wrap = [self valueForKey:@"wrap" ofView:labelView];        if((wrap != nil) && [wrap boolValue]) {            labelView.lineBreakMode = NSLineBreakByWordWrapping;            labelView.numberOfLines = 0;        }        //文字对齐方式的支持        NSString *textAlignment = [self valueForKey:@"font-alignment" ofView:labelView];        if ([textAlignment isEqualToString:@"center"]){            labelView.textAlignment = NSTextAlignmentCenter;        }        else if ([textAlignment isEqualToString:@"right"]){            labelView.textAlignment = NSTextAlignmentRight;        }        else{            labelView.textAlignment = NSTextAlignmentLeft;        }         //文字具体对齐方式的支持        if([labelView isKindOfClass:[WGUILabel class]]){            //间距            NSString *padding = [self valueForKey:@"padding" ofView:labelView];            if(padding!=nil) {                [labelView setInsets: UIEdgeInsetsFromString(padding) ];            }            //居上对齐和居下对齐            NSString *verticalAlignment = [self valueForKey:@"vertical-alignment" ofView:labelView];            if ([verticalAlignment isEqualToString:@"top"]){                [labelView setVerticalAlignment:VerticalAlignmentTop];            }            else if ([verticalAlignment isEqualToString:@"bottom"]){                [labelView setVerticalAlignment:VerticalAlignmentBottom];            }        }                //文字自适应大小        NSString *autosize = [self valueForKey:@"auto-size" ofView:labelView];        if(autosize!=nil && [autosize boolValue]) {            labelView.numberOfLines = 0;            labelView.lineBreakMode = NSLineBreakByWordWrapping;                                                if([self isIOS8OrHigher]) {                [labelView setNeedsLayout];                [labelView layoutIfNeeded];            }            else {                                                    [labelView.superview setNeedsLayout];                    [labelView.superview layoutIfNeeded];                                        [labelView setNeedsLayout];                    [labelView layoutIfNeeded];                                if(_isFakeViewMode) {                    if(labelView.bounds.size.width == 0) {                        NSLog(@"labelView  layoutIfNeeded %@, %@, %f",labelView.text, NSStringFromCGRect(labelView.bounds), [self fixWidth:labelView.bounds.size.width])                        ;                    }                    if(labelView.bounds.size.width > 0) {                        CGFloat height =  [labelView sizeThatFits:CGSizeMake([self fixWidth:labelView.bounds.size.width], MAXFLOAT)].height;                        if(height >0 ) {                            [labelView mas_makeConstraints:^(MASConstraintMaker *make) {                                make.height.equalTo(@(height));                            }];                        }                    }                }            }        }    }#pragma mark DACircularProgressView专有的属性    else if([view isKindOfClass:[SEFilterControl class]]) {        SEFilterControl *filterView = (SEFilterControl * )view;        NSArray *options = [self valueForKey:@"options" ofView:view];        if(options != nil) {            [filterView setOptions:options];        }                [filterView addTarget:self action:@selector(filterValueChanged:) forControlEvents:UIControlEventValueChanged];    }#pragma mark DACircularProgressView专有的属性    else if([view isKindOfClass:[DACircularProgressView class]]) {        DACircularProgressView *labeledCircularProgressView = (DACircularProgressView * )view;        NSNumber *roundedCorners = [self valueForKey:@"roundedCorners" ofView:view];        if(roundedCorners != nil) {            labeledCircularProgressView.roundedCorners = [roundedCorners boolValue];        }    }#pragma mark WTMGlyphDetectorView专有的属性    else if([view isKindOfClass:[WTMGlyphDetectorView class]]) {        WTMGlyphDetectorView *wtmGlyphDetectorView = (WTMGlyphDetectorView * )view;        NSString *guestureColor = [self valueForKey:@"gesture-color" ofView:view];        if(guestureColor != nil) {            wtmGlyphDetectorView.gestureColor = [UIColor colorWithHexString:guestureColor];        }                NSString *timeoutStr = [self valueForKey:@"timeout" ofView:view];        if(timeoutStr != nil) {            wtmGlyphDetectorView.timeout = [timeoutStr floatValue];        }                NSString *lineWidth = [self valueForKey:@"line-width" ofView:view];        if(lineWidth != nil) {            wtmGlyphDetectorView.lineWidth = [lineWidth floatValue];        }                id gesture = [self valueForKey:@"gesture" ofView:view];        if(gesture != nil) {            if([gesture isKindOfClass:[NSString class]]) {                [wtmGlyphDetectorView loadTemplatesFromArray:[NSArray arrayWithObject:gesture]];            }            else {                [wtmGlyphDetectorView loadTemplatesFromArray:gesture];            }                    }    }#pragma mark 矢量图专有的属性    else if([view isKindOfClass:[JAMSVGImageView class]]){        JAMSVGImageView *svgImageView = (JAMSVGImageView *)view;        //图片地址        NSString *src = [self valueForKey:@"src" ofView:svgImageView];        if(src!=nil) {            NSString *realPath = [_bundle pathForResource:[NSString stringWithFormat:@"%@",src] ofType:nil];            JAMSVGImage *svgImages  = [JAMSVGImage imageWithContentsOfFile:realPath];            svgImageView.svgImage =svgImages;            svgImageView.contentMode = UIViewContentModeScaleAspectFit;            [svgImageView setNeedsDisplay];        }                NSString *srcSelected = [self valueForKey:@"src-selected" ofView:svgImageView];        if(src!=nil) {            NSString *realPath = [_bundle pathForResource:[NSString stringWithFormat:@"%@",srcSelected] ofType:nil];            JAMSVGImage *svgImages  = [JAMSVGImage imageWithContentsOfFile:realPath];            svgImageView.svgImageSelected =svgImages;            [svgImageView setNeedsDisplay];        }                //是否已选中        NSString *selected = [self valueForKey:@"selected" ofView:svgImageView];        if(selected!=nil) {            svgImageView.selected = [selected boolValue];        }    }#pragma mark 时间选择器专有的属性    else if([view isKindOfClass:[UIDatePicker class]]){//        UIPickerView *pickerView = (UIPickerView *) view;        UIDatePicker *dataPicker_one = (UIDatePicker *)view;                NSString *dataPicker = [self valueForKey:@"dataPicker" ofView:view];        if ((dataPicker != nil) && ([dataPicker boolValue])) {                        NSDate *date_one = dataPicker_one.date;            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];            [formatter setDateFormat:@"yyyy-MM-dd"];            NSString *str=[formatter stringFromDate:date_one];        }                NSString *timePicker = [self valueForKey:@"timePicker" ofView:view];        if ((timePicker != nil) && ([timePicker boolValue])) {                        NSDate *date_one = dataPicker_one.date;            NSDateFormatter *formatter = [[NSDateFormatter alloc] init];            [formatter setDateFormat:@"hh:mm:ss"];            NSString *str=[formatter stringFromDate:date_one];        }    }#pragma mark 饼状图专有的属性    else if ([view isKindOfClass:[WGPieChart class]]){        WGPieChart *piechart=(WGPieChart *)view;        NSString *name = [self valueForKey:@"name" ofView:view];        if ((name != nil)) {                        NSArray *data = [self maybeValueOfParam:[NSString stringWithFormat:@"@%@", name] key:@"name" ofView:view];            NSLog(@"WGPieChart data = %@", data);            [piechart setStartPieAngle:M_PI_2];            [piechart setAnimationSpeed:1.0];                        //字体大小的支持            NSString *fontSize = [self valueForKey:@"font-size" ofView:piechart];            if(fontSize!=nil) {                piechart.labelFont = [UIFont fontWithName:piechart.labelFont.familyName size:[self realFontSize: fontSize]];            }            //文字颜色的支持            NSString *textColor = [self valueForKey:@"font-color" ofView:piechart];            if(textColor!=nil) {                piechart.labelColor = [UIColor colorWithHexString:textColor];            }            //字体是否加粗            NSNumber*fontBold = [self valueForKey:@"font－bold" ofView:piechart];            if((fontBold != nil) && [fontBold boolValue]) {                piechart.labelFont = [UIFont boldSystemFontOfSize:piechart.labelFont.pointSize];            }                        [piechart setLabelFont:[UIFont fontWithName:@"DBLCDTempBlack" size:24]];            //[self.pieChartLeft setLabelRadius:160];                        NSString *mode = [self valueForKey:@"mode" ofView:view];            if ((mode != nil) && [mode isEqualToString:@"%"]) {                [piechart setShowPercentage:YES];            }                        //背景颜色的支持            NSString *backroungdColor = [self valueForKey:@"background-color" ofView:piechart];            if(backroungdColor!=nil) {                [piechart setPieBackgroundColor :[UIColor colorWithHexString:backroungdColor] ];            }                        //背景颜色的支持            NSString *interaction = [self valueForKey:@"interaction" ofView:piechart];            if(interaction!=nil ) {                [piechart setUserInteractionEnabled:[interaction boolValue]];            }                                    //[piechart setPieCenter:CGPointMake(120, 120)];                        //[self.pieChartLeft setLabelShadowColor:[UIColor blackColor]];                    }    }#pragma mark 滑动条专有的属性    else if ([view isKindOfClass:[UISlider class]]){        UISlider *slider=(UISlider *)view;        //左边的图片        NSString *leftImage = [self valueForKey:@"leftImage" ofView:slider];        if (leftImage!=nil) {            UIImage *stetchLeftTrack =[self imageFromResourcePath:leftImage];            [slider setMinimumTrackImage:stetchLeftTrack forState:UIControlStateNormal];        }        //右边的图片        NSString *rightImage = [self valueForKey:@"rightImage" ofView:slider];        if (rightImage!=nil) {            UIImage *stetchRightTrack =[self imageFromResourcePath:rightImage];            [slider setMaximumTrackImage:stetchRightTrack forState:UIControlStateNormal];        }        //中间的图片        NSString *thuImage = [self valueForKey:@"thumbImage" ofView:slider];        if (thuImage!=nil) {            UIImage *thumbImage =[self imageFromResourcePath:thuImage];            [slider setThumbImage:thumbImage forState:UIControlStateHighlighted];            [slider setThumbImage:thumbImage forState:UIControlStateNormal];        }        slider.value=0.0;        slider.minimumValue=0.0;        slider.maximumValue=1.0;        //注意这里要加UIControlStateHightlighted的状态，否则当拖动滑块时滑块将变成原生的控件        //滑块拖动时的事件        [slider addTarget:self action:@selector(sliderValueChanged) forControlEvents:UIControlEventValueChanged];        //滑动拖动后的事件        [slider addTarget:self action:@selector(sliderDragUp) forControlEvents:UIControlEventTouchUpInside];    }#pragma mark 滑动杆专有的属性    else if ([view isKindOfClass:[SEFilterControl class]]){        //        SEFilterControl *filter=(SEFilterControl *)view;//        //        filter = [[SEFilterControl alloc]initWithFrame:view.frame Titles:[NSArray arrayWithObjects:@"Articles", @"News", @"Updates", @"Featured", @"Newest", @"Oldest", nil]];//        [filter addTarget:self action:@selector(filterValueChanged:) forControlEvents:UIControlEventValueChanged];            }#pragma mark 标准弹出框//    else if ([view isKindOfClass:[UIAlertView class]]){//        //        //        //   //        //    }//    //        #pragma mark 动画专有的属性            #pragma mark 滑动页面专有的属性    else if([view isKindOfClass:[UIScrollView class]]) {        UIScrollView *scrollView = (UIScrollView *)view;        //顶部refresh，下拉        NSNumber *headerRefresh = [self valueForKey:@"headerRefresh" ofView:scrollView];        if((headerRefresh != nil) && [headerRefresh boolValue]) {            [scrollView addHeaderWithTarget:scrollView.wgInfo.vc action:@selector(headerRereshing)];        }        //上拉加载更多(进入刷新状态就会调用self的footerRereshing)        NSNumber *footerRefresh =[self valueForKey:@"footerRefresh" ofView:scrollView];        if((footerRefresh != nil) && [footerRefresh boolValue]) {            [scrollView addFooterWithTarget:scrollView.wgInfo.vc action:@selector(footerRereshing)];        }        //是否编辑        NSNumber *scrollEnabled =[self valueForKey:@"scrollEnabled" ofView:scrollView];        if((scrollEnabled != nil) && (![scrollEnabled boolValue])) {            scrollView.scrollEnabled = NO;        }        //是否翻页        NSNumber *pagingEnabled =[self valueForKey:@"pagingEnabled" ofView:scrollView];        if((pagingEnabled != nil) && ([pagingEnabled boolValue])) {            scrollView.pagingEnabled = YES;        }        //限制滑动方向        NSNumber *lockDirection =[self valueForKey:@"lockDirection" ofView:scrollView];        if((lockDirection != nil) && ([lockDirection boolValue])) {            scrollView.directionalLockEnabled = YES;        }        //内容的大小        NSString *contentSize = [subviewOption objectForKey:@"content-size"];        if(contentSize != nil) {            CGSize size = CGSizeFromString(contentSize);            scrollView.contentSize = size;        }        //否显示水平方向的滚动条        NSNumber *showsHScroll = [subviewOption objectForKey:@"showsHScroll"];        if((showsHScroll != nil) && (![showsHScroll boolValue])) {            scrollView.showsHorizontalScrollIndicator =NO;        }        //否显示水平方向的滚动条        NSNumber *showsVScroll = [subviewOption objectForKey:@"showsVScroll"];        if((showsVScroll != nil) && (![showsVScroll boolValue])) {            scrollView.showsVerticalScrollIndicator =NO;        }        //内容的缩进        NSString *contentInsetStr = [subviewOption objectForKey:@"contentInset"];        if(contentInsetStr != nil) {            UIEdgeInsets contentInset = UIEdgeInsetsFromString(contentInsetStr);            scrollView.contentInset = contentInset;        }        //Pagecontrol支持        WGUIScrollViewViewController *vc = (WGUIScrollViewViewController *) view.wgInfo.vc;        if(vc!=nil && [vc isKindOfClass:[WGUIScrollViewViewController class]]) {           //隐藏pagecontrol            NSNumber *hidePControl =[subviewOption valueForKey:@"hidePControl"];            if((hidePControl != nil) && [hidePControl boolValue]) {                vc.pageControl.hidden = YES;            }            //改变pagecontrol位置            NSString *frameStr = [subviewOption objectForKey:@"framePControl"];            if (frameStr!=nil) {                frameStr = [self valueForKey:@"framePControl" ofView:view];                CGRect frame = CGRectFromString(frameStr);                vc.pageControl.frame =frame;            }            //自适应位置            NSString *anchorStr = [subviewOption valueForKey:@"anchorPControl"];            if(anchorStr !=nil) {                CGRect anchor = CGRectFromString(anchorStr);                [self applyAutoresizeMask: anchor ToView: view];            }                        UIPageControl *pageControl = [UIPageControl appearance];            //选中的颜色            NSString *colorPControlSelected = [subviewOption valueForKey:@"colorPControlSelected"];            if(colorPControlSelected !=nil) {                pageControl.currentPageIndicatorTintColor = [UIColor colorWithHexString:colorPControlSelected];            }                        //未选中的颜色            NSString *colorPControl = [subviewOption valueForKey:@"colorPControl"];            if(colorPControl !=nil) {                pageControl.pageIndicatorTintColor = [UIColor colorWithHexString:colorPControl];            }        }	//处理单元格默认选择        if ([view isKindOfClass:[UITableView class]] || [view isKindOfClass:[UICollectionView class]]) {            [self handleDefaultCellSelection:view properties:subviewOption inPath:path forParentView:parentView];        }#pragma mark 表格页面专有的属性        if ([view isKindOfClass:[UITableView class]]) {            UITableView *tableview = (UITableView *) view;            //cell是否点击            NSNumber *allowSelection =[self valueForKey:@"allowSelection" ofView:tableview];            if((allowSelection != nil) && (![allowSelection boolValue])) {                tableview.allowsSelection = NO;            }            //cell是否编辑            NSNumber*editable = [self valueForKey:@"editable" ofView:tableview];            if((editable != nil) && (![editable boolValue])) {                tableview.editing =YES;            }                        //自动选择cell第一行            NSNumber *multipleSelection =[self valueForKey:@"allowMultipleSelection" ofView:tableview];            if((multipleSelection != nil) && ([multipleSelection boolValue])) {                tableview.allowsMultipleSelection = YES;            }            //分割线是否显示            NSNumber *seperator =[self valueForKey:@"seperator" ofView:tableview];            if((seperator != nil) && (![seperator boolValue])) {                tableview.separatorStyle = UITableViewCellSeparatorStyleNone;            }else {                tableview.separatorInset = UIEdgeInsetsZero;                if([self respondsToSelector:@selector(setLayoutMargins:)]) {                    UIEdgeInsets edge = UIEdgeInsetsZero;                                        NSMethodSignature *signature = [[tableview class] instanceMethodSignatureForSelector:@selector(setLayoutMargins:)];                    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];                    invocation.selector = @selector(setLayoutMargins:);                    [invocation setArgument:&edge atIndex:0];                                        [invocation performSelector:@selector(setLayoutMargins:) withObject:tableview];                    //[self performSelector:@selector(setLayoutMargins:) withObject:NSInvocation(UIEdgeInsetsZero)];                }                //tableview.layoutMargins =UIEdgeInsetsZero;                NSString *seperatorColor = [self valueForKey:@"seperator-color" ofView:tableview];                if(seperatorColor!=nil) {                    [tableview setSeparatorColor:[UIColor colorWithHexString:seperatorColor]];                }            }        }        #pragma mark 九宫格专有的属性        if ([view isKindOfClass:[UICollectionView class]]) {                    WGCollectionViewController *collectionview =(WGCollectionViewController *)view;                        //            UICollectionView *collectionview=(UICollectionView *)view;                        //            [collectionview buildCollectionView];                                                NSString *blockLayout =[self valueForKey:@"layout" ofView:view];            NSString *blockUnitSize =[self valueForKey:@"block-unit-size" ofView:view];            NSString *blockUnitInsets =[self valueForKey:@"block-unit-insets" ofView:view];            NSString *blockSize =[self valueForKey:@"block-size" ofView:view];                                                            NSLog(@"blockLayout =%@,blockUnitSize=%@,blockUnitInsets=%@,blockSize=%@",blockLayout,blockUnitSize,blockUnitInsets,blockSize);                                    //            if (blockLayout!=nil) {//               //                collectionview.blockLayout =[[RFQuiltLayout alloc] init];//                collectionview.blockLayout.direction =UICollectionViewScrollDirectionVertical;//                //块的大小//                if (blockUnitSize!=nil) {//                    CGSize size =CGSizeFromString(blockUnitSize);//                    collectionview.blockLayout.blockPixels =size;//                }//                //                collectionview.blockLayout.delegate = self;////                //间距//                if (blockUnitInsets!=nil) {//                    CGRect frame = CGRectFromString(blockUnitInsets);//                }//                //              //                if (blockSize!=nil) {//                    //                    CGSize size =CGSizeFromString(blockSize);//                }//            }        }    }#pragma mark DEBUG    if(WGPAGELOAD_DEBUG) {                view.layer.borderColor = [UIColor colorWithWhite:0.8f                                                   alpha:1.0f].CGColor;        view.layer.borderWidth = 1.0f;                UILabel *debugLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, view.frame.size.height-20, view.frame.size.width, 20)];        debugLabel.backgroundColor = [UIColor colorWithWhite:0.8f                                                       alpha:0.2f];        debugLabel.text = [NSString stringWithFormat:@"page%ld:%@", view.wgInfo.pageId, [view.wgInfo.path stringByReplacingOccurrencesOfString:@"subviews" withString:@"subviews"]] ;        debugLabel.textColor = [UIColor blackColor];        debugLabel.font = [UIFont systemFontOfSize:10.5];        debugLabel.autoresizingMask = UIViewAutoresizingFlexibleTopMargin;        //debugLabel.layer.borderColor = [UIColor greenColor].CGColor;        //debugLabel.layer.borderWidth = 3.0;        [view addSubview:debugLabel];    }}- (CGSize)blockSizeForItem:(NSIndexPath *)indexPath{        return CGSizeMake(2, 2);        }-(UIEdgeInsets)insetsForItem:(NSIndexPath *)indexPath{            return UIEdgeInsetsMake(2, 2, 2, 2);}#pragma mark - 对默认选中页面的支持- (void) handleDefaultCellSelection: (UIView *) view properties: (NSDictionary *) subviewOption inPath: (NSString *)path forParentView: (UIView *) parentView {    NSString *defaultSelected =[self valueForKey:@"default-selected" ofView:view];    if(defaultSelected != nil) {        if([defaultSelected isKindOfClass:[NSArray class]]) {                    }        else {                    }    }}#pragma mark - 毛玻璃效果。- (void)addBlurToView:(UIView *)view {        UIView *blurView = nil;        if([UIBlurEffect class]) { // iOS 8        UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];                blurView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];        blurView.alpha = 1.0;        blurView.frame = view.frame;            } else { // workaround for iOS 7        blurView = [[UIToolbar alloc] initWithFrame:view.bounds];    }        [blurView setTranslatesAutoresizingMaskIntoConstraints:NO];        [view addSubview:blurView];    [view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[blurView]|" options:0 metrics:0 views:NSDictionaryOfVariableBindings(blurView)]];    [view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[blurView]|" options:0 metrics:0 views:NSDictionaryOfVariableBindings(blurView)]];}#pragma mark - 对点击事件“touch”支持。-(void)viewTouched :(UITapGestureRecognizer *)sender{    //[self handleMaybeCellTouched:sender.view];    id touch =[self valueForKey:@"touch" ofView:sender.view];        if ([touch isKindOfClass:[NSArray class]]) {        NSArray *touchs = (NSArray *)touch;        for (NSDictionary *dic in touchs) {            id action =[self maybeValueOfParam:[dic objectForKey:@"action"] key:@"action" ofView:sender.view];            NSString *fromPageId =[self maybeValueOfParam:[dic objectForKey:@"fromPageId"] key:@"fromPageId" ofView:sender.view];            if(fromPageId ==nil) {                fromPageId =[self maybeValueOfParam:[dic objectForKey:@"index"] key:@"index" ofView:sender.view];            }            NSString *key = @"pageid";            if([action isEqualToString:@"animation"]) {                //动画的名称                key = @"name";            }            NSString *pageid =[self maybeValueOfParam:[dic objectForKey:key] key:key ofView:sender.view];            [self handleTouchAction:action andPageid:pageid andFromPageid:fromPageId sender:sender.view];            NSLog(@"raw_action =%@ ,action =%@ ,pageid =%@,wginfo =%@", [dic objectForKey:@"action"] ,action, pageid, sender.view.wgInfo.indexpath);                        //执行动画        }    }else{        //复选框checkbox模式        if([touch isEqualToString:@"checkbox"]) {            if([sender.view isKindOfClass:[JAMSVGImageView class]]) {                JAMSVGImageView *imgview = (JAMSVGImageView *) sender.view;                imgview.selected = !imgview.selected;            }            else if ([sender.view isKindOfClass:[WGUILabel class]]) {                                WGUILabel *button = (WGUILabel *) sender.view;                button.selected = !button.selected;                            }        }        else {            NSString *pageid =[self valueForKey:@"pageid" ofView:sender.view];            NSString *fromPageId =[self valueForKey:@"fromPageId" ofView:sender.view];            [self handleTouchAction:touch andPageid:pageid andFromPageid:fromPageId sender:sender.view];            //执行动画        }    }        //[self maybeReloadCell:sender.view];}- (void) maybeReloadCell: (UIView *) view {    if(view.wgInfo.indexpath !=nil) {        if([view.wgInfo.vc isKindOfClass:[WGCollectionViewController class]]) {            WGCollectionViewController *cvc = (WGCollectionViewController *)view.wgInfo.vc;                        [cvc.collectionView reloadItemsAtIndexPaths:[NSArray arrayWithObject:view.wgInfo.indexpath]];        }        else if([view.wgInfo.vc isKindOfClass:[WGTableViewViewController class]]) {            WGTableViewViewController *cvc = (WGTableViewViewController *)view.wgInfo.vc;                        [cvc.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObject:view.wgInfo.indexpath] withRowAnimation:YES];        }    }}- (void) simulateTouchCellViewController: (WGBaseViewController *) vc selectIndexPath: (NSIndexPath *) indexPath{    if([vc isKindOfClass:[WGCollectionViewController class]]) {        WGCollectionViewController *cvc = (WGCollectionViewController *) vc;                NSArray *itemsSelected = cvc.collectionView.indexPathsForSelectedItems;        if(itemsSelected!=nil && itemsSelected.count >0 ){            NSIndexPath *oldSelectedIndexPath = [itemsSelected objectAtIndex:0];                        [cvc.collectionView deselectItemAtIndexPath:oldSelectedIndexPath animated:YES];            [cvc didDeselectItemAtIndexPath:oldSelectedIndexPath];                    }        [cvc.collectionView selectItemAtIndexPath:indexPath animated:YES scrollPosition:UICollectionViewScrollPositionNone];        [cvc didSelectItemAtIndexPath:indexPath];    }    else if([vc isKindOfClass:[WGTableViewViewController class]]) {        WGTableViewViewController *cvc = (WGTableViewViewController *) vc;                NSArray *itemsSelected = cvc.tableView.indexPathsForSelectedRows;        if(itemsSelected!=nil && itemsSelected.count >0 ){            NSIndexPath *oldSelectedIndexPath = [itemsSelected objectAtIndex:0];                        [cvc.tableView deselectRowAtIndexPath: oldSelectedIndexPath animated:YES];            [cvc didDeselectItemAtIndexPath:oldSelectedIndexPath];                    }        [cvc.tableView selectRowAtIndexPath:indexPath animated:YES scrollPosition:UITableViewScrollPositionNone];        [cvc didSelectItemAtIndexPath:indexPath];    }}- (void) handleMaybeCellTouched: (UIView *) view {    if(view.wgInfo.indexpath !=nil) {//        NSLog(@"viewTouched = %@",view.wgInfo);//        NSString *path = [view.wgInfo.path stringByReplacingOccurrencesOfString:@"/cell" withString:@""];//        NSLog(@"path = %@", path);        [self simulateTouchCellViewController:view.wgInfo.vc selectIndexPath:view.wgInfo.indexpath];    }}-(void)HandleOnShow:(WGBaseViewController *) wgVC {    NSArray *onshow = [wgVC.plist objectFromPath: [NSString stringWithFormat:@"%@",@"onshow"]];    if(onshow !=nil && [onshow count] > 0) {        NSLog(@"onshow = %@",onshow);                NSArray *touchs = (NSArray *)onshow;        for (NSDictionary *dic in touchs) {                        id action =[self maybeValueOfParam:[dic objectForKey:@"action"] key:@"action" ofView:wgVC.view];            NSString *key = @"pageid";            if([action isEqualToString:@"animation"]) {                //动画的名称                key = @"name";            }            NSString *pageid =[self maybeValueOfParam:[dic objectForKey:key] key:key ofView:wgVC.view];            [self handleTouchAction:dic andPageid:pageid andFromPageid:nil sender:wgVC.view];        }    }        NSObject<WGPageLoaderDelegate> *wgPageLoaderDelegate = wgVC.wgDelegate;        if([wgPageLoaderDelegate respondsToSelector:@selector(viewControllerDidAppear)]) {        if(!([wgVC isKindOfClass:              [WGCollectionViewController class]] ||             [wgVC isKindOfClass:[WGTableViewViewController class] ] || [wgVC isKindOfClass:[WGUIScrollViewViewController class]])) {            [wgPageLoaderDelegate viewControllerDidAppear];        }    }}-(void)HandleOnShowCell:(UIView *) view {        NSArray *onshow = [view.wgInfo.properties objectForKey:@"onshow"];    if(onshow !=nil && [onshow count] > 0) {        NSLog(@"onshow = %@",onshow);                NSArray *touchs = (NSArray *)onshow;        for (NSDictionary *dic in touchs) {                        id action =[self maybeValueOfParam:[dic objectForKey:@"action"] key:@"action" ofView:view];            NSString *key = @"pageid";            if([action isEqualToString:@"animation"]) {                //动画的名称                key = @"name";            }                   NSString *pageid =[self maybeValueOfParam:[dic objectForKey:key] key:key ofView:view];            [self handleTouchAction:dic andPageid:pageid andFromPageid:nil sender:view];                                    //NSLog(@"raw_action =%@ ,action =%@ ,pageid =%@,wginfo =%@", [dic objectForKey:@"action"] ,action, pageid, sender.view.wgInfo.indexpath);        }    }        NSObject<WGPageLoaderDelegate> *wgPageLoaderDelegate = view.wgInfo.vc.wgDelegate;        if([wgPageLoaderDelegate respondsToSelector:@selector(cellDidAppearWithIndexPath:ofView:withViewInfo:)]) {        [wgPageLoaderDelegate cellDidAppearWithIndexPath:view.wgInfo.indexpath ofView:view withViewInfo:view.wgInfo];    }}-(void)handleTouchAction:(id)touchDict andPageid:(NSString *)pageid  andFromPageid:(NSString *)fromPageId sender:(UIView *)senderView{    NSString *touch = nil;    if([touchDict isKindOfClass:[NSDictionary class]]) {        touch = [((NSDictionary *)touchDict) objectForKey:@"action"];    }    else {        touch = touchDict;    }    //替换效果    if ([touch isEqualToString:@"replace"]){        WGBaseViewController *parentVC = (WGBaseViewController *)[self getViewControllerOfPage:[pageid integerValue]];            if (parentVC.parentViewController==parentVC.navigationController) {            parentVC = parentVC.navigationController;        }                        parentVC = parentVC.parentViewController;                UIViewController *vc =[self getViewControllerOfPage:[pageid integerValue]];                NSLog(@"parentVC.currentSubPageVc =%@ view = %@", parentVC.currentSubPageVc, parentVC.currentSubPageVc.view);                if(parentVC.currentSubPageVc == vc || parentVC.currentSubPageVc == vc.parentViewController) {            return;        }                //[parentVC.currentSubPageVc.view removeFromSuperview] ;                [parentVC removeChildViewControllerFromContainer:parentVC.currentSubPageVc];                        if (vc.parentViewController==vc.navigationController) {            [parentVC addChildViewControllerToContainer:vc.navigationController addToView:YES];            //vc.navigationController.view.frame = parentVC.view.bounds;            //[parentVC.view addSubview:vc.navigationController.view];            //[parentVC.view sendSubviewToBack:vc.navigationController.view];            //vc.navigationController.view.hidden =NO;            parentVC.currentSubPageVc =vc.navigationController;        }else{            [parentVC addChildViewControllerToContainer:vc addToView:YES];//            vc.view.frame = parentVC.view.bounds;//            [parentVC.view addSubview:vc.view];//            [parentVC.view sendSubviewToBack:vc.view];            //vc.view.hidden =NO;            parentVC.currentSubPageVc = vc;        }    }    //从主页中进行跳转    else if([touch isEqualToString:@"pushRoot"]){        UIViewController *vc =[pageLoader createUIViewControllerForPageId: [pageid integerValue]];        NSArray *childVCs = [[YPAppDelegate me].window.rootViewController childViewControllers];        if([childVCs count]>0) {            UINavigationController *nav = [childVCs objectAtIndex:0];            if([nav isKindOfClass:[UINavigationController class]]) {                [nav pushViewController:vc animated:YES];            }        }    }    //从页面跳转，可以保留底部栏    else if([touch isEqualToString:@"push"]){                UIViewController *vc =[pageLoader createUIViewControllerForPageId: [pageid integerValue]];                WGBaseViewController *parentVC = nil;        if(fromPageId == nil) {            parentVC = (WGBaseViewController *)[pageLoader getViewControllerOfPage: senderView.wgInfo.pageId];        }        else {            parentVC = (WGBaseViewController *)[pageLoader getViewControllerOfPage: [fromPageId integerValue]];        }                UINavigationController *nav = parentVC.navigationController;        if (nav !=nil ) {            [nav pushViewController:vc animated:YES];        }    }    //从页面返回    else if([touch isEqualToString:@"pop"]){        UINavigationController *nav = senderView.wgInfo.vc.navigationController;        if (nav !=nil &&[nav isKindOfClass:[UINavigationController class]]) {            [nav popViewControllerAnimated:YES];        }    }    //从页面显示出    else if ([touch isEqualToString:@"show"]){        UIViewController *vc =[self getViewControllerOfPage:[pageid integerValue]];                        if (vc.parentViewController==vc.navigationController) {            WGBaseViewController *parentVC = vc.navigationController.parentViewController;            [parentVC addChildViewControllerToContainer:vc.navigationController addToView:YES];            //[parentVC.view addSubview:vc.navigationController.view];            //vc.navigationController.view.hidden =NO;            [self showAnimation:senderView andViewController:vc sender:senderView];        }else{            WGBaseViewController *parentVC = vc.parentViewController;            [parentVC addChildViewControllerToContainer:vc addToView:YES];            //[parentVC.view addSubview:vc.view];             [self showAnimation:senderView andViewController:vc sender:senderView];            //vc.view.hidden =NO;        }    }    //从页面隐藏    else if ([touch isEqualToString:@"hide"]){        UIViewController *vc =[self getViewControllerOfPage:[pageid integerValue]];        if (vc.parentViewController==vc.navigationController) {            WGBaseViewController *parentVC = vc.navigationController.parentViewController;            [parentVC removeChildViewControllerFromContainer:vc.navigationController];            //[vc.navigationController.view removeFromSuperview];            //vc.navigationController.view.hidden =YES;            [self showAnimation:senderView andViewController:vc sender:senderView];        }else{            WGBaseViewController *parentVC = vc.parentViewController;            [parentVC removeChildViewControllerFromContainer:vc];            [self showAnimation:senderView andViewController:vc sender:senderView];            //[vc.view removeFromSuperview];            //vc.view.hidden =YES;        }    }    //类似于隐藏效果    else if ([touch isEqualToString:@"toggle"]){        UIViewController *vc =[self getViewControllerOfPage:[pageid integerValue]];        if (vc.parentViewController==vc.navigationController) {            vc.navigationController.view.hidden =!vc.navigationController.view.hidden;              [self showAnimation:senderView andViewController:vc sender:senderView];        }else{            vc.view.hidden =!vc.view.hidden;              [self showAnimation:senderView andViewController:vc sender:senderView];        }    }    //动画    else if([touch isEqualToString:@"animation"]){        // pageid 为动画的名称        NSArray *animations = [senderView.wgInfo.vc.plist objectFromPath: [NSString stringWithFormat:@"%@/%@",@"animations",pageid]];        NSString *repeat = nil;        if([touchDict isKindOfClass:[NSDictionary class]]) {            repeat =[self maybeValueOfParam:[touchDict objectForKey:@"repeat"] key:@"repeat" ofView:senderView];        }        if(animations !=nil && [animations count] > 0) {            [self animationRunner:animations andTarget:0 sender:senderView repeat:repeat];        }    }        //选中单元格    else if([touch isEqualToString:@"selectCell"]){        // fromPageId 为单元格的序号        WGBaseViewController *cellVC = (WGBaseViewController *)[self getViewControllerOfPage:[pageid integerValue]];                cellVC = [[cellVC childViewControllers] objectAtIndex:0];                [self simulateTouchCellViewController:cellVC selectIndexPath:[NSIndexPath indexPathForRow:[fromPageId integerValue] inSection:0]];    }}-(UIView *)getSubviewByPath:(NSString *)subviewPath inParentView:(UIView *)parentView{        NSArray *subviews = [parentView subviews];        for (UIView *subview in subviews) {        if([subview.wgInfo.path isEqualToString:subviewPath]) {              return subview;        }    }        return nil;}#pragma mark -- 动画执行引擎-(void) animationRunner:( NSArray *)animations andTarget:(NSInteger)target sender:(UIView *)senderView repeat: (id) repeatAll{    NSDictionary *animation = [animations objectAtIndex:target];    NSString *subviewPath = [animation objectForKey:@"target"];    if(subviewPath == nil) return;        UIView *animationTargetView = nil;    if(senderView.wgInfo.indexpath == nil) {            animationTargetView = [self getSubviewByPath:subviewPath inViewController:senderView.wgInfo.vc];        }    else {        animationTargetView =[self getSubviewByPath:subviewPath inParentView:senderView];    }                if(animationTargetView == nil) return;    //系统延迟    NSString *sleepForTime = [animation objectForKey:@"sleepForTime"];    if(sleepForTime!=nil) {        [NSThread sleepForTimeInterval:[sleepForTime floatValue]];    }    //duration为动画持续的时间    NSString *duration = [animation objectForKey:@"duration"];    if(duration==nil) {        return;    };    //delay为动画开始执行前等待的时间    NSString *delay = [animation objectForKey:@"delay"];    if(delay==nil){        delay =0;    }    //能量衰减度    NSString *damping = [animation objectForKey:@"damping"];    //加速度    NSString *velocity = [animation objectForKey:@"velocity"];    //options指定的方式运行这个动画//    NSString *options = [animation objectForKey:@"options"];    //旋转的角度    NSString *rotation = [animation objectForKey:@"rotation"];    if (rotation==nil){        rotation =0;    }    //弧度的大小    NSString *cornerRadius = [animation objectForKey:@"cornerRadius"];    //放大和缩小    NSString *scaleX = [animation objectForKey:@"scaleX"];    NSString *scaleY = [animation objectForKey:@"scaleY"];    //移动    NSString *transX = [animation objectForKey:@"transX"];    NSString *transY = [animation objectForKey:@"transY"];    //反向    NSNumber *revert = [animation objectForKey:@"revert"];    //隐藏    NSString *hidden = [animation objectForKey:@"hidden"];        NSString *repeat = [animation objectForKey:@"repeat"];    if (damping!=nil&&velocity!=nil ) {        dispatch_async(dispatch_get_main_queue(), ^{                                    //            //            [UIView animateWithDuration: [duration floatValue]//                                  delay: [delay floatValue]//                 usingSpringWithDamping: [damping floatValue]//                  initialSpringVelocity: [velocity floatValue]//                                options:0//                             animations:^{//                                 //形状//                                 animationTargetView.layer.cornerRadius =[cornerRadius floatValue];//                                 animationTargetView.transform = CGAffineTransformTranslate(animationTargetView.transform, 0, 0);//                                 //旋转角度//                                 CGFloat rotationd = [rotation floatValue];//                                 if(rotationd != 0) {//                                     animationTargetView.transform = CGAffineTransformRotate(animationTargetView.transform, rotationd);//                                 }//                                 //放大//                                 if ([scaleX floatValue]!=0||[scaleY floatValue]!=0) {//                                     animationTargetView.transform =CGAffineTransformScale(animationTargetView.transform,[scaleX floatValue], [scaleY floatValue]);//                                 }//                                 //移动//                                 if ([transX floatValue]!=0||[transY floatValue]!=0) {//                                     animationTargetView.transform = CGAffineTransformTranslate(animationTargetView.transform, [transX floatValue], [transY floatValue]);//                                 }//                                 //得到相反的样子 大小 方向 位置执行多次//                                 if ((revert != nil) && [revert boolValue]) {//                                     animationTargetView.transform = CGAffineTransformInvert(animationTargetView.transform);//                                 }//                             }//                             completion:^(BOOL finished) {//                                 //判断是否进入下一个动画//                                 if(target < [animations count]-1) {//                                     [self animationRunner:animations andTarget:target+1 sender:senderView];//                                 }//                                 //结束时候是否隐藏//                                 if (hidden!=nil&&[hidden boolValue]) {//                                      animationTargetView.hidden =YES;//                                 }//  //                             }];        });    }else{                    [self doOrRepeatAnimationBlockOnTargetView: animationTargetView WithDuration:[duration floatValue] delay:[delay floatValue] cornerRadius:[cornerRadius floatValue] rotationd:[rotation floatValue] * M_PI / 180.f scaleX:[scaleX floatValue] scaleY:[scaleY floatValue] transX:[transX floatValue] transY:[transY floatValue] currentStep:0 totalRepeat:[repeat integerValue] revert:[revert boolValue] options:UIViewAnimationOptionCurveEaseIn completion:^(BOOL finished) {                //判断是否进入下一个动画                if(target < [animations count]-1) {                    [self animationRunner:animations andTarget:target+1 sender:senderView repeat:repeatAll];                }                                if([repeatAll isEqualToString:@"infinite"]) {                    [self animationRunner:animations andTarget:0 sender:senderView repeat:repeatAll];                }                                //结束时候是否隐藏                if (hidden!=nil&&[hidden boolValue]) {                    animationTargetView.hidden =YES;                }            }];            }}- (void) doOrRepeatAnimationBlockOnTargetView: (UIView *)animationTargetView WithDuration: (CGFloat) duration delay: (CGFloat) delay cornerRadius:(CGFloat) cornerRadius rotationd: (CGFloat)rotationd scaleX: (CGFloat) scaleX  scaleY: (CGFloat) scaleY transX: (CGFloat) transX  transY: (CGFloat) transY currentStep: (NSInteger) currentStep totalRepeat: (NSInteger) totalRepeat revert: (BOOL) revert options: (UIViewAnimationOptions) options completion:(void (^)(BOOL finished))completion{    dispatch_async(dispatch_get_main_queue(), ^{    [UIView animateWithDuration: duration                          delay: delay                        options:options                     animations:^{                         //形状                         animationTargetView.layer.cornerRadius =cornerRadius;                         //animationTargetView.transform = CGAffineTransformTranslate(animationTargetView.transform, 0, 0);                         //旋转角度                         if(rotationd != 0) {                             //rotationd = M_PI * rotationd / 360.f;                             animationTargetView.transform = CGAffineTransformRotate(animationTargetView.transform, rotationd);                         }                         //放大                         if (scaleX!=0||scaleY!=0) {                             animationTargetView.transform =CGAffineTransformScale(animationTargetView.transform,scaleX, scaleY);                         }                         //移动                         if (transX!=0||transY!=0) {                             animationTargetView.transform = CGAffineTransformTranslate(animationTargetView.transform, transX, transY);                         }                         //得到相反的样子 大小 方向 位置执行多次                         if (revert) {                             animationTargetView.transform = CGAffineTransformInvert(animationTargetView.transform);                         }                     } completion:^(BOOL finished) {                         if(totalRepeat >0 && currentStep < totalRepeat) {                             NSInteger step = currentStep+1;                             [self doOrRepeatAnimationBlockOnTargetView: animationTargetView WithDuration:duration delay:delay cornerRadius:cornerRadius rotationd:rotationd scaleX:scaleX scaleY:scaleY transX:transX transY:transY currentStep:step totalRepeat:totalRepeat revert:revert options:UIViewAnimationOptionCurveLinear completion:completion];                         }                         else {                             completion(finished);                         }                     }];        });}-(void)showAnimation:(UIView *)view andViewController:(UIViewController*)vc sender:(UIView *)senderView{    NSString *beginAnimation =[self valueForKey:@"beginAnimation" ofView:senderView];    NSString *transition = [self valueForKey:@"transition" ofView:senderView];    //旋转向左    if ([transition isEqualToString:@"flipFromLeft"]){                [self beginAnimation:[beginAnimation floatValue] andTransition:UIViewAnimationTransitionFlipFromLeft forView:vc.view cache:YES];    }    //旋转向右    else if ([transition isEqualToString:@"flipFromRight"]){                [self beginAnimation:[beginAnimation floatValue] andTransition:UIViewAnimationTransitionFlipFromRight forView:vc.view cache:YES];    }    //向上翻页    else if ([transition isEqualToString:@"curlUp"]){                [self beginAnimation:[beginAnimation floatValue] andTransition:UIViewAnimationTransitionCurlUp forView:vc.view cache:YES];      //向下翻页    }else if ([transition isEqualToString:@"curlDown"]){                [self beginAnimation:[beginAnimation floatValue] andTransition:UIViewAnimationTransitionCurlDown forView:vc.view cache:YES];            }else if ([transition isEqualToString:@"alertView"]){                UIAlertView *alertView=(UIAlertView *)view;        alertView = [[UIAlertView alloc] initWithTitle:@"Default Alert View"                                               message:@"Defalut"                                              delegate:self                                     cancelButtonTitle:@"Cancel"                                     otherButtonTitles:@"OK", nil];        NSString *showalertView =[self valueForKey:@"showalertView" ofView:view];                [alertView show];     }else{                [self beginAnimation:[beginAnimation floatValue] andTransition:UIViewAnimationTransitionNone forView:vc.view cache:YES];    }}-(void)beginAnimation:(CFTimeInterval)dur andTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache{    [UIView beginAnimations:@"animation" context:nil];        [UIView setAnimationDuration:dur];    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];    [UIView setAnimationRepeatAutoreverses:NO];        [UIView setAnimationTransition:transition forView:view cache:cache];        [UIView commitAnimations];    view.hidden =NO;}-(void)keyboardHide:(UITapGestureRecognizer*)tap{        [textfieldView resignFirstResponder];    }-(void)filterValueChanged:(SEFilterControl *) sender{//    [selectedIndex setText:[NSString stringWithFormat:@"%d", sender.SelectedIndex]];    NSLog(@"filterValueChanged = %@",sender.SelectedValue);    NSObject<WGPageLoaderDelegate> *wgPageLoaderDelegate = sender.wgInfo.vc.wgDelegate;        if(wgPageLoaderDelegate != nil) {        //二次取值 之一        if([wgPageLoaderDelegate respondsToSelector:@selector(optionSelected:ofView:withViewInfo:)]) {            [wgPageLoaderDelegate optionSelected:sender.SelectedValue ofView:sender withViewInfo:sender.wgInfo];        }    }}#pragma mark  对滑动事件支持。-(void)sliderDragUp{    NSLog(@"sliderDragUp");}-(void)sliderValueChanged{    NSLog(@"sliderValueChanged");}#pragma mark  设置HTML。- (void) setHTML: (NSString *) html forView: (UIView *) view {    DTAttributedTextContentView *labelView = nil;    if([view isKindOfClass:[DTAttributedLabel class]]) {        labelView = (DTAttributedTextContentView *)view;    }    else if ([view isKindOfClass:[DTAttributedTextView class]]){        labelView = ((DTAttributedTextView *)view).attributedTextContentView;    }    else {        return;    }        labelView.delegate = self;                    NSMutableDictionary *dic = [NSMutableDictionary dictionary];    //字体库名称    NSString *textFontFamily = [self valueForKey:@"font-family" ofView:view];    if(textFontFamily!=nil) {        [dic setObject:textFontFamily forKey:DTDefaultFontFamily];    }    //字体大小的支持    NSString *fontSize = [self valueForKey:@"font-size" ofView:view];    if(fontSize!=nil) {        [dic setObject:[NSNumber numberWithFloat: [self realFontSize: fontSize]] forKey:DTDefaultFontSize];    }        //文字颜色的支持    NSString *textColor = [self valueForKey:@"font-color" ofView:view];    if(textColor!=nil) {        [dic setObject:[UIColor colorWithHexString:textColor] forKey:DTDefaultTextColor];    }        //文字整体变大变小的支持    NSString *TextSizeMultiplier = [self valueForKey:@"font-size-multiplier" ofView:view];    if(TextSizeMultiplier!=nil) {        [dic setObject:[NSNumber numberWithFloat:[self realFontSize: TextSizeMultiplier]] forKey:NSTextSizeMultiplierDocumentOption];    }        //HTML基地址    NSString *BaseURL = [self valueForKey:@"base-url" ofView:view];    if(BaseURL!=nil) {        [dic setObject:[NSURL URLWithString:BaseURL]  forKey:NSBaseURLDocumentOption];    }        //行高系数的处理    NSString *DefaultLineHeightMultiplier = [self valueForKey:@"line-height-multiplier" ofView:view];    if(DefaultLineHeightMultiplier!=nil) {        [dic setObject:[NSNumber numberWithFloat:[self realFontSize: DefaultLineHeightMultiplier]] forKey:DTDefaultLineHeightMultiplier];    }        //处理页头和页脚    NSString *template = [self valueForKey:@"template" ofView:view];    if(template!=nil) {        html = [[self realTitle:template] stringByReplacingOccurrencesOfString:@"{{body}}" withString:[self realTitle:html]];    }    else {        html = [self realTitle:html];    }        NSData *data = [html dataUsingEncoding:NSUTF8StringEncoding];        NSAttributedString *temp = [[[DTHTMLAttributedStringBuilder alloc] initWithHTML:data            options:dic                                                                 documentAttributes:nil]                                generatedAttributedString];        labelView.attributedString = temp;}- (UIView *)attributedTextContentView:(DTAttributedTextContentView *)attributedTextContentView viewForAttachment:(DTTextAttachment *)attachment frame:(CGRect)frame{    if ([attachment isKindOfClass:[DTVideoTextAttachment class]])    {        NSURL *url = (id)attachment.contentURL;                // we could customize the view that shows before playback starts        UIView *grayView = [[UIView alloc] initWithFrame:frame];        grayView.backgroundColor = [DTColor blackColor];                // find a player for this URL if we already got one        MPMoviePlayerController *player = nil;        if(_mediaPlayers == nil) {            _mediaPlayers = [NSMutableArray array];        }                for (player in self.mediaPlayers)        {            if ([player.contentURL isEqual:url])            {                break;            }        }                if (!player)        {            player = [[MPMoviePlayerController alloc] initWithContentURL:url];            [self.mediaPlayers addObject:player];        }        #if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_4_2        NSString *airplayAttr = [attachment.attributes objectForKey:@"x-webkit-airplay"];        if ([airplayAttr isEqualToString:@"allow"])        {            if ([player respondsToSelector:@selector(setAllowsAirPlay:)])            {                player.allowsAirPlay = YES;            }        }#endif                NSString *controlsAttr = [attachment.attributes objectForKey:@"controls"];        if (controlsAttr)        {            player.controlStyle = MPMovieControlStyleEmbedded;        }        else        {            player.controlStyle = MPMovieControlStyleNone;        }                NSString *loopAttr = [attachment.attributes objectForKey:@"loop"];        if (loopAttr)        {            player.repeatMode = MPMovieRepeatModeOne;        }        else        {            player.repeatMode = MPMovieRepeatModeNone;        }                NSString *autoplayAttr = [attachment.attributes objectForKey:@"autoplay"];        if (autoplayAttr)        {            player.shouldAutoplay = YES;        }        else        {            player.shouldAutoplay = NO;        }                [player prepareToPlay];                player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;        player.view.frame = grayView.bounds;        [grayView addSubview:player.view];                return grayView;    }    else if ([attachment isKindOfClass:[DTImageTextAttachment class]])    {        // if the attachment has a hyperlinkURL then this is currently ignored        DTLazyImageView *imageView = [[DTLazyImageView alloc] initWithFrame:frame];        imageView.delegate = self;                // sets the image if there is one        imageView.image = [(DTImageTextAttachment *)attachment image];                // url for deferred loading        imageView.url = attachment.contentURL;                // if there is a hyperlink then add a link button on top of this image        if (attachment.hyperLinkURL)        {            // NOTE: this is a hack, you probably want to use your own image view and touch handling            // also, this treats an image with a hyperlink by itself because we don't have the GUID of the link parts            imageView.userInteractionEnabled = YES;                        DTLinkButton *button = [[DTLinkButton alloc] initWithFrame:imageView.bounds];            button.URL = attachment.hyperLinkURL;            button.minimumHitSize = CGSizeMake(25, 25); // adjusts it's bounds so that button is always large enough            button.GUID = attachment.hyperLinkGUID;                        // use normal push action for opening URL            [button addTarget:self action:@selector(linkPushed:) forControlEvents:UIControlEventTouchUpInside];                        // demonstrate combination with long press            UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(linkLongPressed:)];            [button addGestureRecognizer:longPress];                        [imageView addSubview:button];        }                return imageView;    }    else if ([attachment isKindOfClass:[DTIframeTextAttachment class]])    {        DTWebVideoView *videoView = [[DTWebVideoView alloc] initWithFrame:frame];        videoView.attachment = attachment;                return videoView;    }    else if ([attachment isKindOfClass:[DTObjectTextAttachment class]])    {        // somecolorparameter has a HTML color        NSString *colorName = [attachment.attributes objectForKey:@"somecolorparameter"];        UIColor *someColor = DTColorCreateWithHTMLName(colorName);                UIView *someView = [[UIView alloc] initWithFrame:frame];        someView.backgroundColor = someColor;        someView.layer.borderWidth = 1;        someView.layer.borderColor = [UIColor blackColor].CGColor;                someView.accessibilityLabel = colorName;        someView.isAccessibilityElement = YES;                return someView;    }        return nil;}#pragma mark -- 图标-饼状图，柱状图共用- (NSUInteger)numberOfSlicesInChart:(UIView *) view {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(numberOfSlicesInPieChart:)])) {        NSString *path = [NSString stringWithFormat:@"data/%@", [view.wgInfo.properties objectForKey:@"name"]];        NSArray *array = [view.wgInfo.vc.plist objectFromPath:path];        return array == nil ? 0 : [array count];    }    else {        return [wgCellDelegate numberOfSlicesInChart:view.wgInfo];    }}- (NSString *)view:(UIView *)view valueForSliceAtIndex:(NSUInteger)index key: (NSString *) key{    NSString *path = [NSString stringWithFormat:@"data/%@/%ld/%@", [view.wgInfo.properties objectForKey:@"name"],(long)index, key];    return [view.wgInfo.vc.plist objectFromPath:path];}- (CGFloat)view:(UIView *)view valueForSliceAtIndex:(NSUInteger)index {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(valueForSliceAtIndex:senderInfo:)])) {        NSString *value = [self view:view valueForSliceAtIndex:index key:@"value"];        return value==nil ? 0 : [value floatValue];    }    else {        return [wgCellDelegate valueForSliceAtIndex:index senderInfo:view.wgInfo];    }}- (NSString *)view:(UIView *)view titleForSliceAtIndex:(NSUInteger)index {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(titleForSliceAtIndex:senderInfo:)])) {        NSString *value = [self view:view valueForSliceAtIndex:index key:@"title"];        return value == nil ? @"" : value;    }    else {        return [wgCellDelegate titleForSliceAtIndex:index senderInfo:view.wgInfo];    }}- (UIColor *) view:(UIView *)view colorForSliceAtIndex:(NSUInteger)index {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(colorForSliceAtIndex:senderInfo:)])) {        NSString *value = [self view:view valueForSliceAtIndex:index key:@"color"];        return value==nil ? nil : [UIColor colorWithHexString:value];    }    else {        return [wgCellDelegate colorForSliceAtIndex:index senderInfo:view.wgInfo];    }}- (NSInteger)numberOfSlicesPresentedEveryTime:(UIView *) view {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(numberOfSlicesPresentedEveryTimeOfView:senderInfo:)])) {        NSString *value = [self valueForKey:@"page-size" ofView:view];        return value ==nil ? 7 : [value intValue];    }    else {        return [wgCellDelegate numberOfSlicesPresentedEveryTimeOfView:view senderInfo:view.wgInfo];    }}- (CGFloat)highestValueOfChart:(UIView *)view {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(highestValueOfChart:senderInfo:)])) {        NSString *value = [self valueForKey:@"max-value" ofView:view];        return value == nil ? 0 : [value floatValue];    }    else {        return [wgCellDelegate highestValueOfChart:view senderInfo:view.wgInfo];    }}- (NSString *) unitOfChart:(UIView *) view {    NSObject<WGPageLoaderDelegate> *wgCellDelegate = view.wgInfo.vc.wgDelegate;    if(wgCellDelegate == nil || (![(NSObject *)wgCellDelegate respondsToSelector:@selector(unitOfChart:senderInfo:)])) {        NSString *value = [self valueForKey:@"unit" ofView:view];        return value == nil ? @"" : value;    }    else {        return [wgCellDelegate unitOfChart:view senderInfo:view.wgInfo];    }}-(void) pushRoot: (UIViewController *) vc {    NSArray *childs = [YPAppDelegate me].window.rootViewController.childViewControllers;    if(childs!=nil) {        for (UINavigationController *nav in childs) {            if([nav isKindOfClass:[UINavigationController class]]) {                [nav pushViewController:vc animated:YES];            }        }    }}- (UIImage *)loadRetinaImageIfAvailable:(NSString *)path {        NSString *retinaPath = [[path stringByDeletingLastPathComponent] stringByAppendingPathComponent:[NSString stringWithFormat:@"%@@2x.%@", [[path lastPathComponent] stringByDeletingPathExtension], [path pathExtension]]];        if( [UIScreen mainScreen].scale == 2.0 && [[NSFileManager defaultManager] fileExistsAtPath:retinaPath] == YES)        return [[UIImage alloc] initWithCGImage:[[UIImage imageWithData:[NSData dataWithContentsOfFile:retinaPath]] CGImage] scale:2.0 orientation:UIImageOrientationUp];    else        return [UIImage imageWithContentsOfFile:path];}#pragma mark -- 旋转动画- (void) spinWithOptions: (UIViewAnimationOptions) options targetView: (UIView *) view speed: (CGFloat) speed {    // this spin completes 360 degrees every 2 seconds    [UIView animateWithDuration: 1 / (4 * speed)                          delay: 0.0f                        options: options                     animations: ^{                         view.transform = CGAffineTransformRotate(view.transform, M_PI / 2);                     }                     completion: ^(BOOL finished) {                         if (finished) {                             if (view.wgInfo.animating) {                                 // if flag still set, keep spinning with constant speed                                 [self spinWithOptions: UIViewAnimationOptionCurveLinear targetView:view speed:speed];                             } else if (options != UIViewAnimationOptionCurveEaseOut) {                                 // one last spin, with deceleration                                 [self spinWithOptions: UIViewAnimationOptionCurveEaseOut targetView:view speed:speed];                             }                         }                     }];}- (void) startSpinView: (UIView *) view speed: (CGFloat) speed {    if (!view.wgInfo.animating) {        view.wgInfo.animating = YES;        [self spinWithOptions: UIViewAnimationOptionCurveEaseIn targetView: view speed:speed];    }}- (void) stopSpinView: (UIView *) view {    // set the flag to stop spinning after one last 90 degree increment    view.wgInfo.animating = NO;}#pragma mark -- 手势检测代理#define GESTURE_SCORE_THRESHOLD         0.7f- (void)wtmGlyphDetectorView:(WTMGlyphDetectorView*)theView glyphDetected:(WTMGlyph *)glyph withScore:(float)score {    //Reject detection when quality too low    //More info: http://britg.com/2011/07/17/complex-gesture-recognition-understanding-the-score/    if (score < GESTURE_SCORE_THRESHOLD)        return;    NSObject<WGPageLoaderDelegate> *wgCellDelegate = theView.wgInfo.vc.wgDelegate;    if(wgCellDelegate != nil && ([(NSObject *)wgCellDelegate respondsToSelector:@selector(gestureGlyphDetectedWithString:andScore:)])) {        [wgCellDelegate gestureGlyphDetectedWithString:glyph.name andScore:score];    }}@end